from . import auth_store as auth_store, models as models
from .const import GROUP_ID_ADMIN as GROUP_ID_ADMIN
from .mfa_modules import MultiFactorAuthModule as MultiFactorAuthModule, auth_mfa_module_from_config as auth_mfa_module_from_config
from .providers import AuthProvider as AuthProvider, LoginFlow as LoginFlow, auth_provider_from_config as auth_provider_from_config
from datetime import timedelta
from homeassistant import data_entry_flow as data_entry_flow
from homeassistant.auth.const import ACCESS_TOKEN_EXPIRATION as ACCESS_TOKEN_EXPIRATION
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from typing import Any, Dict, List, Optional

EVENT_USER_ADDED: str
EVENT_USER_REMOVED: str

class InvalidAuthError(Exception): ...
class InvalidProvider(Exception): ...

async def auth_manager_from_config(hass: HomeAssistant, provider_configs: List[Dict[str, Any]], module_configs: List[Dict[str, Any]]) -> AuthManager: ...

class AuthManagerFlowManager(data_entry_flow.FlowManager):
    auth_manager: Any = ...
    def __init__(self, hass: HomeAssistant, auth_manager: AuthManager) -> None: ...
    async def async_create_flow(self, handler_key: Any, *, context: Optional[Dict[str, Any]]=..., data: Optional[Dict[str, Any]]=...) -> data_entry_flow.FlowHandler: ...
    async def async_finish_flow(self, flow: data_entry_flow.FlowHandler, result: Dict[str, Any]) -> Dict[str, Any]: ...

class AuthManager:
    hass: Any = ...
    login_flow: Any = ...
    def __init__(self, hass: HomeAssistant, store: auth_store.AuthStore, providers: _ProviderDict, mfa_modules: _MfaModuleDict) -> None: ...
    @property
    def auth_providers(self) -> List[AuthProvider]: ...
    @property
    def auth_mfa_modules(self) -> List[MultiFactorAuthModule]: ...
    def get_auth_provider(self, provider_type: str, provider_id: Optional[str]) -> Optional[AuthProvider]: ...
    def get_auth_providers(self, provider_type: str) -> List[AuthProvider]: ...
    def get_auth_mfa_module(self, module_id: str) -> Optional[MultiFactorAuthModule]: ...
    async def async_get_users(self) -> List[models.User]: ...
    async def async_get_user(self, user_id: str) -> Optional[models.User]: ...
    async def async_get_owner(self) -> Optional[models.User]: ...
    async def async_get_group(self, group_id: str) -> Optional[models.Group]: ...
    async def async_get_user_by_credentials(self, credentials: models.Credentials) -> Optional[models.User]: ...
    async def async_create_system_user(self, name: str, group_ids: Optional[List[str]]=...) -> models.User: ...
    async def async_create_user(self, name: str, group_ids: Optional[List[str]]=...) -> models.User: ...
    async def async_get_or_create_user(self, credentials: models.Credentials) -> models.User: ...
    async def async_link_user(self, user: models.User, credentials: models.Credentials) -> None: ...
    async def async_remove_user(self, user: models.User) -> None: ...
    async def async_update_user(self, user: models.User, name: Optional[str]=..., is_active: Optional[bool]=..., group_ids: Optional[List[str]]=...) -> None: ...
    async def async_activate_user(self, user: models.User) -> None: ...
    async def async_deactivate_user(self, user: models.User) -> None: ...
    async def async_remove_credentials(self, credentials: models.Credentials) -> None: ...
    async def async_enable_user_mfa(self, user: models.User, mfa_module_id: str, data: Any) -> None: ...
    async def async_disable_user_mfa(self, user: models.User, mfa_module_id: str) -> None: ...
    async def async_get_enabled_mfa(self, user: models.User) -> Dict[str, str]: ...
    async def async_create_refresh_token(self, user: models.User, client_id: Optional[str]=..., client_name: Optional[str]=..., client_icon: Optional[str]=..., token_type: Optional[str]=..., access_token_expiration: timedelta=..., credential: Optional[models.Credentials]=...) -> models.RefreshToken: ...
    async def async_get_refresh_token(self, token_id: str) -> Optional[models.RefreshToken]: ...
    async def async_get_refresh_token_by_token(self, token: str) -> Optional[models.RefreshToken]: ...
    async def async_remove_refresh_token(self, refresh_token: models.RefreshToken) -> None: ...
    def async_create_access_token(self, refresh_token: models.RefreshToken, remote_ip: Optional[str]=...) -> str: ...
    def async_validate_refresh_token(self, refresh_token: models.RefreshToken, remote_ip: Optional[str]=...) -> None: ...
    async def async_validate_access_token(self, token: str) -> Optional[models.RefreshToken]: ...
