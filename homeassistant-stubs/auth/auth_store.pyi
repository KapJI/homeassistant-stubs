from . import models as models
from .const import GROUP_ID_ADMIN as GROUP_ID_ADMIN, GROUP_ID_READ_ONLY as GROUP_ID_READ_ONLY, GROUP_ID_USER as GROUP_ID_USER
from .permissions import PermissionLookup as PermissionLookup, system_policies as system_policies
from .permissions.types import PolicyType as PolicyType
from datetime import timedelta
from homeassistant.auth.const import ACCESS_TOKEN_EXPIRATION as ACCESS_TOKEN_EXPIRATION
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from typing import Any, List, Optional

STORAGE_VERSION: int
STORAGE_KEY: str
GROUP_NAME_ADMIN: str
GROUP_NAME_USER: str
GROUP_NAME_READ_ONLY: str

class AuthStore:
    hass: Any = ...
    def __init__(self, hass: HomeAssistant) -> None: ...
    async def async_get_groups(self) -> List[models.Group]: ...
    async def async_get_group(self, group_id: str) -> Optional[models.Group]: ...
    async def async_get_users(self) -> List[models.User]: ...
    async def async_get_user(self, user_id: str) -> Optional[models.User]: ...
    async def async_create_user(self, name: Optional[str], is_owner: Optional[bool]=..., is_active: Optional[bool]=..., system_generated: Optional[bool]=..., credentials: Optional[models.Credentials]=..., group_ids: Optional[List[str]]=...) -> models.User: ...
    async def async_link_user(self, user: models.User, credentials: models.Credentials) -> None: ...
    async def async_remove_user(self, user: models.User) -> None: ...
    async def async_update_user(self, user: models.User, name: Optional[str]=..., is_active: Optional[bool]=..., group_ids: Optional[List[str]]=...) -> None: ...
    async def async_activate_user(self, user: models.User) -> None: ...
    async def async_deactivate_user(self, user: models.User) -> None: ...
    async def async_remove_credentials(self, credentials: models.Credentials) -> None: ...
    async def async_create_refresh_token(self, user: models.User, client_id: Optional[str]=..., client_name: Optional[str]=..., client_icon: Optional[str]=..., token_type: str=..., access_token_expiration: timedelta=..., credential: Optional[models.Credentials]=...) -> models.RefreshToken: ...
    async def async_remove_refresh_token(self, refresh_token: models.RefreshToken) -> None: ...
    async def async_get_refresh_token(self, token_id: str) -> Optional[models.RefreshToken]: ...
    async def async_get_refresh_token_by_token(self, token: str) -> Optional[models.RefreshToken]: ...
    def async_log_refresh_token_usage(self, refresh_token: models.RefreshToken, remote_ip: Optional[str]=...) -> None: ...
