from .const import SAMPLE_CHANNELS as SAMPLE_CHANNELS, SAMPLE_RATE as SAMPLE_RATE, SAMPLE_WIDTH as SAMPLE_WIDTH
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Iterable
from dataclasses import dataclass
from enum import StrEnum

_LOGGER: Incomplete

class VadSensitivity(StrEnum):
    DEFAULT = 'default'
    RELAXED = 'relaxed'
    AGGRESSIVE = 'aggressive'
    @staticmethod
    def to_seconds(sensitivity: VadSensitivity | str) -> float: ...

class AudioBuffer:
    _buffer: Incomplete
    _length: int
    def __init__(self, maxlen: int) -> None: ...
    @property
    def length(self) -> int: ...
    def clear(self) -> None: ...
    def append(self, data: bytes) -> None: ...
    def bytes(self) -> bytes: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...

@dataclass
class VoiceCommandSegmenter:
    speech_seconds: float = ...
    command_seconds: float = ...
    silence_seconds: float = ...
    timeout_seconds: float = ...
    reset_seconds: float = ...
    in_command: bool = ...
    timed_out: bool = ...
    _speech_seconds_left: float = ...
    _command_seconds_left: float = ...
    _silence_seconds_left: float = ...
    _timeout_seconds_left: float = ...
    _reset_seconds_left: float = ...
    def __post_init__(self) -> None: ...
    def reset(self) -> None: ...
    def process(self, chunk_seconds: float, is_speech: bool | None) -> bool: ...
    def process_with_vad(self, chunk: bytes, vad_samples_per_chunk: int | None, vad_is_speech: Callable[[bytes], bool], leftover_chunk_buffer: AudioBuffer | None) -> bool: ...
    def __init__(self, speech_seconds=..., command_seconds=..., silence_seconds=..., timeout_seconds=..., reset_seconds=..., in_command=..., timed_out=..., _speech_seconds_left=..., _command_seconds_left=..., _silence_seconds_left=..., _timeout_seconds_left=..., _reset_seconds_left=...) -> None: ...

@dataclass
class VoiceActivityTimeout:
    silence_seconds: float
    reset_seconds: float = ...
    _silence_seconds_left: float = ...
    _reset_seconds_left: float = ...
    def __post_init__(self) -> None: ...
    def reset(self) -> None: ...
    def process(self, chunk_seconds: float, is_speech: bool | None) -> bool: ...
    def __init__(self, silence_seconds, reset_seconds=..., _silence_seconds_left=..., _reset_seconds_left=...) -> None: ...

def chunk_samples(samples: bytes, bytes_per_chunk: int, leftover_chunk_buffer: AudioBuffer) -> Iterable[bytes]: ...
