from _typeshed import Incomplete
from bleak import BleakScanner
from bleak.backends.device import BLEDevice as BLEDevice
from bleak.backends.scanner import AdvertisementData as AdvertisementData, AdvertisementDataCallback as AdvertisementDataCallback, BaseBleakScanner
from homeassistant.core import CALLBACK_TYPE as CALLBACK_TYPE
from typing import Any, Final

_LOGGER: Incomplete
FILTER_UUIDS: Final[str]
HA_BLEAK_SCANNER: Union[HaBleakScanner, None]

def _dispatch_callback(callback: AdvertisementDataCallback, filters: dict[str, set[str]], device: BLEDevice, advertisement_data: AdvertisementData) -> None: ...

class HaBleakScanner(BleakScanner):
    _callbacks: Incomplete
    history: Incomplete
    _setup: bool
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def async_setup(self, *args: Any, **kwargs: Any) -> None: ...
    def async_reset(self) -> None: ...
    def async_register_callback(self, callback: AdvertisementDataCallback, filters: dict[str, set[str]]) -> CALLBACK_TYPE: ...
    def async_callback_dispatcher(self, device: BLEDevice, advertisement_data: AdvertisementData) -> None: ...

class HaBleakScannerWrapper(BaseBleakScanner):
    _detection_cancel: Incomplete
    _mapped_filters: Incomplete
    _adv_data_callback: Incomplete
    def __init__(self, *args: Any, detection_callback: Union[AdvertisementDataCallback, None] = ..., service_uuids: Union[list[str], None] = ..., **kwargs: Any) -> None: ...
    async def stop(self, *args: Any, **kwargs: Any) -> None: ...
    async def start(self, *args: Any, **kwargs: Any) -> None: ...
    def _map_filters(self, *args: Any, **kwargs: Any) -> bool: ...
    def set_scanning_filter(self, *args: Any, **kwargs: Any) -> None: ...
    def _cancel_callback(self) -> None: ...
    @property
    def discovered_devices(self) -> list[BLEDevice]: ...
    def register_detection_callback(self, callback: Union[AdvertisementDataCallback, None]) -> None: ...
    def _setup_detection_callback(self) -> None: ...
    def __del__(self) -> None: ...
