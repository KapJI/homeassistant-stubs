from .const import DISCOVER_SCAN_TIMEOUT as DISCOVER_SCAN_TIMEOUT, DOMAIN as DOMAIN, FLUX_LED_DISCOVERY as FLUX_LED_DISCOVERY, FLUX_LED_DISCOVERY_LOCK as FLUX_LED_DISCOVERY_LOCK, FLUX_LED_EXCEPTIONS as FLUX_LED_EXCEPTIONS, SIGNAL_STATE_UPDATED as SIGNAL_STATE_UPDATED, STARTUP_SCAN_TIMEOUT as STARTUP_SCAN_TIMEOUT
from flux_led.aio import AIOWifiLedBulb
from flux_led.scanner import FluxLEDDiscovery as FluxLEDDiscovery
from homeassistant import config_entries as config_entries
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.const import CONF_HOST as CONF_HOST, CONF_NAME as CONF_NAME, EVENT_HOMEASSISTANT_STARTED as EVENT_HOMEASSISTANT_STARTED
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.exceptions import ConfigEntryNotReady as ConfigEntryNotReady
from homeassistant.helpers.debounce import Debouncer as Debouncer
from homeassistant.helpers.dispatcher import async_dispatcher_send as async_dispatcher_send
from homeassistant.helpers.event import async_track_time_interval as async_track_time_interval
from homeassistant.helpers.typing import ConfigType as ConfigType
from homeassistant.helpers.update_coordinator import DataUpdateCoordinator as DataUpdateCoordinator, UpdateFailed as UpdateFailed
from typing import Any, Final

_LOGGER: Any
PLATFORMS_BY_TYPE: Final[Any]
DISCOVERY_INTERVAL: Final[Any]
REQUEST_REFRESH_DELAY: Final[float]

def async_wifi_bulb_for_host(host: str) -> AIOWifiLedBulb: ...
def async_name_from_discovery(device: FluxLEDDiscovery) -> str: ...
def async_update_entry_from_discovery(hass: HomeAssistant, entry: config_entries.ConfigEntry, device: FluxLEDDiscovery) -> None: ...
async def async_discover_devices(hass: HomeAssistant, timeout: int, address: Union[str, None] = ...) -> list[FluxLEDDiscovery]: ...
async def async_discover_device(hass: HomeAssistant, host: str) -> Union[FluxLEDDiscovery, None]: ...
def async_trigger_discovery(hass: HomeAssistant, discovered_devices: list[FluxLEDDiscovery]) -> None: ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool: ...
async def async_update_listener(hass: HomeAssistant, entry: ConfigEntry) -> None: ...
async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool: ...
async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool: ...

class FluxLedUpdateCoordinator(DataUpdateCoordinator):
    device: Any
    def __init__(self, hass: HomeAssistant, device: AIOWifiLedBulb) -> None: ...
    async def _async_update_data(self) -> None: ...
