from .const import FLUX_COLOR_MODE_TO_HASS as FLUX_COLOR_MODE_TO_HASS, MIN_RGB_BRIGHTNESS as MIN_RGB_BRIGHTNESS
from flux_led.aio import AIOWifiLedBulb as AIOWifiLedBulb
from flux_led.const import MultiColorEffects
from homeassistant.components.light import COLOR_MODE_BRIGHTNESS as COLOR_MODE_BRIGHTNESS, COLOR_MODE_ONOFF as COLOR_MODE_ONOFF, COLOR_MODE_WHITE as COLOR_MODE_WHITE
from homeassistant.util.color import color_RGB_to_hsv as color_RGB_to_hsv, color_hsv_to_RGB as color_hsv_to_RGB

def _hass_color_modes(device: AIOWifiLedBulb) -> set[str]: ...
def format_as_flux_mac(mac: Union[str, None]) -> Union[str, None]: ...
def _human_readable_option(const_option: str) -> str: ...
def _flux_color_mode_to_hass(flux_color_mode: Union[str, None], flux_color_modes: set[str]) -> str: ...
def _effect_brightness(brightness: int) -> int: ...
def _str_to_multi_color_effect(effect_str: str) -> MultiColorEffects: ...
def _is_zero_rgb_brightness(rgb: tuple[int, int, int]) -> bool: ...
def _min_rgb_brightness(rgb: tuple[int, int, int]) -> tuple[int, int, int]: ...
def _min_scaled_rgb_brightness(rgb: tuple[int, int, int]) -> tuple[int, int, int]: ...
def _min_rgbw_brightness(rgbw: tuple[int, int, int, int], current_rgbw: tuple[int, int, int, int]) -> tuple[int, int, int, int]: ...
def _min_rgbwc_brightness(rgbwc: tuple[int, int, int, int, int], current_rgbwc: tuple[int, int, int, int, int]) -> tuple[int, int, int, int, int]: ...
