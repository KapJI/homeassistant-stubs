from . import GiosDataUpdateCoordinator as GiosDataUpdateCoordinator
from .const import API_AQI as API_AQI, API_CO as API_CO, API_NO2 as API_NO2, API_O3 as API_O3, API_PM10 as API_PM10, API_PM25 as API_PM25, API_SO2 as API_SO2, ATTRIBUTION as ATTRIBUTION, ATTR_STATION as ATTR_STATION, DEFAULT_NAME as DEFAULT_NAME, DOMAIN as DOMAIN, ICONS_MAP as ICONS_MAP, MANUFACTURER as MANUFACTURER, SENSOR_MAP as SENSOR_MAP
from homeassistant.components.air_quality import AirQualityEntity as AirQualityEntity
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.const import CONF_NAME as CONF_NAME
from homeassistant.core import HomeAssistant as HomeAssistant
from homeassistant.helpers.entity import DeviceInfo as DeviceInfo
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from homeassistant.helpers.entity_registry import async_get_registry as async_get_registry
from homeassistant.helpers.update_coordinator import CoordinatorEntity as CoordinatorEntity
from typing import Any

PARALLEL_UPDATES: int

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry, async_add_entities: AddEntitiesCallback) -> None: ...

class GiosAirQuality(CoordinatorEntity, AirQualityEntity):
    coordinator: GiosDataUpdateCoordinator
    _name: Any = ...
    _attrs: Any = ...
    def __init__(self, coordinator: GiosDataUpdateCoordinator, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def icon(self) -> str: ...
    @property
    def air_quality_index(self) -> Union[str, None]: ...
    @property
    def particulate_matter_2_5(self) -> Union[float, None]: ...
    @property
    def particulate_matter_10(self) -> Union[float, None]: ...
    @property
    def ozone(self) -> Union[float, None]: ...
    @property
    def carbon_monoxide(self) -> Union[float, None]: ...
    @property
    def sulphur_dioxide(self) -> Union[float, None]: ...
    @property
    def nitrogen_dioxide(self) -> Union[float, None]: ...
    @property
    def attribution(self) -> str: ...
    @property
    def unique_id(self) -> str: ...
    @property
    def device_info(self) -> DeviceInfo: ...
    @property
    def extra_state_attributes(self) -> Union[dict[str, Any], None]: ...
    def _get_sensor_value(self, sensor: str) -> Union[float, None]: ...

def round_state(state: Union[float, None]) -> Union[float, None]: ...
