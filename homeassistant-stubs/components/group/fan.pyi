from . import GroupEntity as GroupEntity
from .util import attribute_equal as attribute_equal, most_frequent_attribute as most_frequent_attribute, reduce_attribute as reduce_attribute, states_equal as states_equal
from homeassistant.components.fan import ATTR_DIRECTION as ATTR_DIRECTION, ATTR_OSCILLATING as ATTR_OSCILLATING, ATTR_PERCENTAGE as ATTR_PERCENTAGE, ATTR_PERCENTAGE_STEP as ATTR_PERCENTAGE_STEP, DOMAIN as DOMAIN, FanEntity as FanEntity, PLATFORM_SCHEMA as PLATFORM_SCHEMA, SERVICE_OSCILLATE as SERVICE_OSCILLATE, SERVICE_SET_DIRECTION as SERVICE_SET_DIRECTION, SERVICE_SET_PERCENTAGE as SERVICE_SET_PERCENTAGE, SERVICE_TURN_OFF as SERVICE_TURN_OFF, SERVICE_TURN_ON as SERVICE_TURN_ON, SUPPORT_DIRECTION as SUPPORT_DIRECTION, SUPPORT_OSCILLATE as SUPPORT_OSCILLATE, SUPPORT_SET_SPEED as SUPPORT_SET_SPEED
from homeassistant.const import ATTR_ASSUMED_STATE as ATTR_ASSUMED_STATE, ATTR_ENTITY_ID as ATTR_ENTITY_ID, ATTR_SUPPORTED_FEATURES as ATTR_SUPPORTED_FEATURES, CONF_ENTITIES as CONF_ENTITIES, CONF_NAME as CONF_NAME, CONF_UNIQUE_ID as CONF_UNIQUE_ID, STATE_ON as STATE_ON
from homeassistant.core import Event as Event, HomeAssistant as HomeAssistant, State as State, callback as callback
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from homeassistant.helpers.event import async_track_state_change_event as async_track_state_change_event
from homeassistant.helpers.typing import ConfigType as ConfigType, DiscoveryInfoType as DiscoveryInfoType
from typing import Any

SUPPORTED_FLAGS: Any
DEFAULT_NAME: str
PARALLEL_UPDATES: int
_LOGGER: Any

async def async_setup_platform(hass: HomeAssistant, config: ConfigType, async_add_entities: AddEntitiesCallback, discovery_info: Union[DiscoveryInfoType, None] = ...) -> None: ...

class FanGroup(GroupEntity, FanEntity):
    _attr_assumed_state: bool
    _entities: Any
    _fans: Any
    _percentage: Any
    _oscillating: Any
    _direction: Any
    _supported_features: int
    _speed_count: int
    _is_on: bool
    _attr_name: Any
    _attr_extra_state_attributes: Any
    _attr_unique_id: Any
    def __init__(self, unique_id: Union[str, None], name: str, entities: list[str]) -> None: ...
    @property
    def supported_features(self) -> int: ...
    @property
    def speed_count(self) -> int: ...
    @property
    def is_on(self) -> bool: ...
    @property
    def percentage(self) -> Union[int, None]: ...
    @property
    def current_direction(self) -> Union[str, None]: ...
    @property
    def oscillating(self) -> Union[bool, None]: ...
    def _update_supported_features_event(self, event: Event) -> None: ...
    def async_update_supported_features(self, entity_id: str, new_state: Union[State, None], update_state: bool = ...) -> None: ...
    async def async_added_to_hass(self) -> None: ...
    async def async_set_percentage(self, percentage: int) -> None: ...
    async def async_oscillate(self, oscillating: bool) -> None: ...
    async def async_set_direction(self, direction: str) -> None: ...
    async def async_turn_on(self, speed: Union[str, None] = ..., percentage: Union[int, None] = ..., preset_mode: Union[str, None] = ..., **kwargs: Any) -> None: ...
    async def async_turn_off(self, **kwargs: Any) -> None: ...
    async def _async_call_supported_entities(self, service: str, support_flag: int, data: dict[str, Any]) -> None: ...
    async def _async_call_all_entities(self, service: str) -> None: ...
    def _async_states_by_support_flag(self, flag: int) -> list[State]: ...
    def _set_attr_most_frequent(self, attr: str, flag: int, entity_attr: str) -> None: ...
    def async_update_group_state(self) -> None: ...
