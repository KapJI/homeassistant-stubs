from . import HomeKitEntity as HomeKitEntity, KNOWN_DEVICES as KNOWN_DEVICES
from aiohomekit.model.services import Service as Service
from homeassistant.components.lock import LockEntity as LockEntity, STATE_JAMMED as STATE_JAMMED
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.const import ATTR_BATTERY_LEVEL as ATTR_BATTERY_LEVEL, STATE_LOCKED as STATE_LOCKED, STATE_UNKNOWN as STATE_UNKNOWN, STATE_UNLOCKED as STATE_UNLOCKED
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from typing import Any

CURRENT_STATE_MAP: Any
TARGET_STATE_MAP: Any
REVERSED_TARGET_STATE_MAP: Any

async def async_setup_entry(hass: HomeAssistant, config_entry: ConfigEntry, async_add_entities: AddEntitiesCallback) -> None: ...

class HomeKitLock(HomeKitEntity, LockEntity):
    def get_characteristic_types(self) -> list[str]: ...
    @property
    def is_locked(self) -> Union[bool, None]: ...
    @property
    def is_locking(self) -> bool: ...
    @property
    def is_unlocking(self) -> bool: ...
    @property
    def is_jammed(self) -> bool: ...
    async def async_lock(self, **kwargs: Any) -> None: ...
    async def async_unlock(self, **kwargs: Any) -> None: ...
    async def _set_lock_state(self, state: str) -> None: ...
    @property
    def extra_state_attributes(self) -> dict[str, Any]: ...
