from .const import ATTR_REMAINING as ATTR_REMAINING, DOMAIN as DOMAIN, IDENTIFY_WAVEFORM as IDENTIFY_WAVEFORM, MESSAGE_RETRIES as MESSAGE_RETRIES, MESSAGE_TIMEOUT as MESSAGE_TIMEOUT, TARGET_ANY as TARGET_ANY, UNAVAILABLE_GRACE as UNAVAILABLE_GRACE, _LOGGER as _LOGGER
from .util import async_execute_lifx as async_execute_lifx, get_real_mac_addr as get_real_mac_addr, infrared_brightness_option_to_value as infrared_brightness_option_to_value, infrared_brightness_value_to_option as infrared_brightness_value_to_option, lifx_features as lifx_features
from _typeshed import Incomplete
from aiolifx.aiolifx import Light as Light
from aiolifx.connection import LIFXConnection as LIFXConnection
from enum import IntEnum
from homeassistant.const import Platform as Platform
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers.debounce import Debouncer as Debouncer
from homeassistant.helpers.update_coordinator import DataUpdateCoordinator as DataUpdateCoordinator, UpdateFailed as UpdateFailed
from typing import Any

REQUEST_REFRESH_DELAY: float
LIFX_IDENTIFY_DELAY: float

class FirmwareEffect(IntEnum):
    OFF: int
    MOVE: int
    MORPH: int
    FLAME: int

class LIFXUpdateCoordinator(DataUpdateCoordinator):
    connection: Incomplete
    device: Incomplete
    lock: Incomplete
    active_effect: Incomplete
    def __init__(self, hass: HomeAssistant, connection: LIFXConnection, title: str) -> None: ...
    def async_setup(self) -> None: ...
    @property
    def serial_number(self) -> str: ...
    @property
    def mac_address(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def current_infrared_brightness(self) -> Union[str, None]: ...
    def async_get_entity_id(self, platform: Platform, key: str) -> Union[str, None]: ...
    async def async_identify_bulb(self) -> None: ...
    async def _async_update_data(self) -> None: ...
    async def async_update_color_zones(self) -> None: ...
    def async_get_hev_cycle_state(self) -> Union[bool, None]: ...
    async def async_get_hev_cycle(self) -> None: ...
    async def async_set_waveform_optional(self, value: dict[str, Any], rapid: bool = ...) -> None: ...
    async def async_get_color(self) -> None: ...
    async def async_set_power(self, state: bool, duration: Union[int, None]) -> None: ...
    async def async_set_color(self, hsbk: list[Union[float, int, None]], duration: Union[int, None]) -> None: ...
    async def async_set_color_zones(self, start_index: int, end_index: int, hsbk: list[Union[float, int, None]], duration: Union[int, None], apply: int) -> None: ...
    async def async_update_multizone_effect(self) -> None: ...
    async def async_set_multizone_effect(self, effect: str, speed: float, direction: str, power_on: bool = ...) -> None: ...
    def async_get_active_effect(self) -> int: ...
    async def async_set_hev_cycle_state(self, enable: bool, duration: int = ...) -> None: ...
    async def async_set_infrared_brightness(self, option: str) -> None: ...
