import sqlalchemy
from ..const import ALWAYS_CONTINUOUS_DOMAINS as ALWAYS_CONTINUOUS_DOMAINS, CONDITIONALLY_CONTINUOUS_DOMAINS as CONDITIONALLY_CONTINUOUS_DOMAINS
from _typeshed import Incomplete
from datetime import datetime as dt
from homeassistant.components.recorder.db_schema import EVENTS_CONTEXT_ID_INDEX as EVENTS_CONTEXT_ID_INDEX, EventData as EventData, Events as Events, OLD_FORMAT_ATTRS_JSON as OLD_FORMAT_ATTRS_JSON, OLD_STATE as OLD_STATE, SHARED_ATTRS_JSON as SHARED_ATTRS_JSON, STATES_CONTEXT_ID_INDEX as STATES_CONTEXT_ID_INDEX, StateAttributes as StateAttributes, States as States
from homeassistant.components.recorder.filters import like_domain_matchers as like_domain_matchers
from sqlalchemy.orm import Query as Query
from sqlalchemy.sql.elements import ClauseList as ClauseList
from sqlalchemy.sql.selectable import Select as Select

CONDITIONALLY_CONTINUOUS_ENTITY_ID_LIKE: Incomplete
ALWAYS_CONTINUOUS_ENTITY_ID_LIKE: Incomplete
UNIT_OF_MEASUREMENT_JSON: str
UNIT_OF_MEASUREMENT_JSON_LIKE: Incomplete
PSUEDO_EVENT_STATE_CHANGED: Incomplete
EVENT_COLUMNS: Incomplete
STATE_COLUMNS: Incomplete
STATE_CONTEXT_ONLY_COLUMNS: Incomplete
EVENT_COLUMNS_FOR_STATE_SELECT: Incomplete
EMPTY_STATE_COLUMNS: Incomplete
EVENT_ROWS_NO_STATES: Incomplete
CONTEXT_ONLY: Incomplete
NOT_CONTEXT_ONLY: Incomplete

def select_events_context_id_subquery(start_day: dt, end_day: dt, event_types: tuple[str, ...]) -> Select: ...
def select_events_context_only() -> Select: ...
def select_states_context_only() -> Select: ...
def select_events_without_states(start_day: dt, end_day: dt, event_types: tuple[str, ...]) -> Select: ...
def select_states() -> Select: ...
def legacy_select_events_context_id(start_day: dt, end_day: dt, context_id: str) -> Select: ...
def apply_states_filters(query: Query, start_day: dt, end_day: dt) -> Query: ...
def _missing_state_matcher() -> sqlalchemy.and_: ...
def _not_continuous_entity_matcher() -> sqlalchemy.or_: ...
def _not_possible_continuous_domain_matcher() -> sqlalchemy.and_: ...
def _conditionally_continuous_domain_matcher() -> sqlalchemy.or_: ...
def _not_uom_attributes_matcher() -> ClauseList: ...
def apply_states_context_hints(query: Query) -> Query: ...
def apply_events_context_hints(query: Query) -> Query: ...
