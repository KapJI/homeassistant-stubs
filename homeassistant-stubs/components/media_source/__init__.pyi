from . import local_source as local_source, models as models
from .const import DOMAIN as DOMAIN, URI_SCHEME as URI_SCHEME, URI_SCHEME_REGEX as URI_SCHEME_REGEX
from .error import Unresolvable as Unresolvable
from homeassistant.components import websocket_api as websocket_api
from homeassistant.components.http.auth import async_sign_path as async_sign_path
from homeassistant.components.media_player.const import ATTR_MEDIA_CONTENT_ID as ATTR_MEDIA_CONTENT_ID
from homeassistant.components.media_player.errors import BrowseError as BrowseError
from homeassistant.components.websocket_api import ActiveConnection as ActiveConnection
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers.integration_platform import async_process_integration_platforms as async_process_integration_platforms
from homeassistant.helpers.typing import ConfigType as ConfigType
from homeassistant.loader import bind_hass as bind_hass
from typing import Any

DEFAULT_EXPIRY_TIME: Any

def is_media_source_id(media_content_id: str) -> bool: ...
def generate_media_source_id(domain: str, identifier: str) -> str: ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool: ...
async def _process_media_source_platform(hass: HomeAssistant, domain: str, platform: Any) -> None: ...
def _get_media_item(hass: HomeAssistant, media_content_id: Union[str, None]) -> models.MediaSourceItem: ...
async def async_browse_media(hass: HomeAssistant, media_content_id: str) -> models.BrowseMediaSource: ...
async def async_resolve_media(hass: HomeAssistant, media_content_id: str) -> models.PlayMedia: ...
async def websocket_browse_media(hass: HomeAssistant, connection: ActiveConnection, msg: dict) -> None: ...
async def websocket_resolve_media(hass: HomeAssistant, connection: ActiveConnection, msg: dict) -> None: ...
