from . import debug_info as debug_info
from .. import mqtt as mqtt
from .const import DEFAULT_QOS as DEFAULT_QOS
from .models import MessageCallbackType as MessageCallbackType
from collections.abc import Callable as Callable, Coroutine
from homeassistant.core import HomeAssistant as HomeAssistant
from typing import Any

class EntitySubscription:
    hass: HomeAssistant
    topic: Union[str, None]
    message_callback: MessageCallbackType
    subscribe_task: Union[Coroutine[Any, Any, Callable[[], None]], None]
    unsubscribe_callback: Union[Callable[[], None], None]
    qos: int
    encoding: str
    def resubscribe_if_necessary(self, hass: HomeAssistant, other: Union[EntitySubscription, None]) -> None: ...
    async def subscribe(self) -> None: ...
    def _should_resubscribe(self, other: Union[EntitySubscription, None]) -> bool: ...
    def __init__(self, hass, topic, message_callback, subscribe_task, unsubscribe_callback, qos, encoding) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

def async_prepare_subscribe_topics(hass: HomeAssistant, new_state: Union[dict[str, EntitySubscription], None], topics: dict[str, Any]) -> dict[str, EntitySubscription]: ...
async def async_subscribe_topics(hass: HomeAssistant, sub_state: Union[dict[str, EntitySubscription], None]) -> None: ...
def async_unsubscribe_topics(hass: HomeAssistant, sub_state: Union[dict[str, EntitySubscription], None]) -> dict[str, EntitySubscription]: ...
