from .const import DiscoveryInfo as DiscoveryInfo, MYSENSORS_DISCOVERY as MYSENSORS_DISCOVERY, SensorType as SensorType
from .device import MySensorsDevice as MySensorsDevice
from .helpers import on_unload as on_unload
from homeassistant.components import mysensors as mysensors
from homeassistant.components.light import ATTR_BRIGHTNESS as ATTR_BRIGHTNESS, ATTR_HS_COLOR as ATTR_HS_COLOR, ATTR_WHITE_VALUE as ATTR_WHITE_VALUE, DOMAIN as DOMAIN, LightEntity as LightEntity, SUPPORT_BRIGHTNESS as SUPPORT_BRIGHTNESS, SUPPORT_COLOR as SUPPORT_COLOR, SUPPORT_WHITE_VALUE as SUPPORT_WHITE_VALUE
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.const import STATE_OFF as STATE_OFF, STATE_ON as STATE_ON
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers.dispatcher import async_dispatcher_connect as async_dispatcher_connect
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from homeassistant.util.color import rgb_hex_to_rgb_list as rgb_hex_to_rgb_list
from typing import Any

SUPPORT_MYSENSORS_RGBW: Any

async def async_setup_entry(hass: HomeAssistant, config_entry: ConfigEntry, async_add_entities: AddEntitiesCallback) -> None: ...

class MySensorsLight(mysensors.device.MySensorsEntity, LightEntity):
    _state: Any
    _brightness: Any
    _hs: Any
    _white: Any
    def __init__(self, *args: Any) -> None: ...
    @property
    def brightness(self) -> Union[int, None]: ...
    @property
    def hs_color(self) -> Union[tuple[int, int], None]: ...
    @property
    def white_value(self) -> Union[int, None]: ...
    @property
    def is_on(self) -> bool: ...
    def _turn_on_light(self) -> None: ...
    def _turn_on_dimmer(self, **kwargs: Any) -> None: ...
    def _turn_on_rgb_and_w(self, hex_template: str, **kwargs: Any) -> None: ...
    async def async_turn_off(self, **kwargs: Any) -> None: ...
    def _async_update_light(self) -> None: ...
    def _async_update_dimmer(self) -> None: ...
    def _async_update_rgb_or_w(self) -> None: ...

class MySensorsLightDimmer(MySensorsLight):
    @property
    def supported_features(self) -> int: ...
    async def async_turn_on(self, **kwargs: Any) -> None: ...
    async def async_update(self) -> None: ...

class MySensorsLightRGB(MySensorsLight):
    @property
    def supported_features(self) -> int: ...
    async def async_turn_on(self, **kwargs: Any) -> None: ...
    async def async_update(self) -> None: ...

class MySensorsLightRGBW(MySensorsLightRGB):
    @property
    def supported_features(self) -> int: ...
    async def async_turn_on(self, **kwargs: Any) -> None: ...
