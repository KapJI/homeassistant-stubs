import pexpect
from _typeshed import Incomplete
from homeassistant import util as util
from homeassistant.components.media_player import MediaPlayerEntity as MediaPlayerEntity, MediaPlayerEntityFeature as MediaPlayerEntityFeature, MediaPlayerState as MediaPlayerState, MediaType as MediaType
from homeassistant.const import EVENT_HOMEASSISTANT_STOP as EVENT_HOMEASSISTANT_STOP, SERVICE_MEDIA_NEXT_TRACK as SERVICE_MEDIA_NEXT_TRACK, SERVICE_MEDIA_PLAY as SERVICE_MEDIA_PLAY, SERVICE_MEDIA_PLAY_PAUSE as SERVICE_MEDIA_PLAY_PAUSE, SERVICE_VOLUME_DOWN as SERVICE_VOLUME_DOWN, SERVICE_VOLUME_UP as SERVICE_VOLUME_UP
from homeassistant.core import Event as Event, HomeAssistant as HomeAssistant
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from homeassistant.helpers.typing import ConfigType as ConfigType, DiscoveryInfoType as DiscoveryInfoType

_LOGGER: Incomplete
CMD_MAP: Incomplete
MIN_TIME_BETWEEN_UPDATES: Incomplete
CURRENT_SONG_PATTERN: Incomplete
STATION_PATTERN: Incomplete

def setup_platform(hass: HomeAssistant, config: ConfigType, add_entities: AddEntitiesCallback, discovery_info: DiscoveryInfoType | None = None) -> None: ...

class PandoraMediaPlayer(MediaPlayerEntity):
    _attr_media_content_type: Incomplete
    _attr_supported_features: Incomplete
    _attr_name: Incomplete
    _attr_state: Incomplete
    _attr_source: str
    _attr_media_title: str
    _attr_media_artist: str
    _attr_media_album_name: str
    _attr_source_list: Incomplete
    _time_remaining: int
    _attr_media_duration: int
    _pianobar: pexpect.spawn[str] | None
    def __init__(self, name: str) -> None: ...
    def turn_on(self) -> None: ...
    def turn_off(self) -> None: ...
    def media_play(self) -> None: ...
    def media_pause(self) -> None: ...
    def media_next_track(self) -> None: ...
    @property
    def media_title(self) -> str | None: ...
    def select_source(self, source: str) -> None: ...
    def _send_station_list_command(self) -> None: ...
    def update_playing_status(self) -> None: ...
    def _query_for_playing_status(self) -> str | None: ...
    def _update_current_station(self, response: str) -> None: ...
    def _update_current_song(self, response: str) -> None: ...
    def _update_song_position(self) -> None: ...
    def _log_match(self) -> None: ...
    def _send_pianobar_command(self, service_cmd: str) -> None: ...
    def _update_stations(self) -> None: ...
    def _clear_buffer(self) -> None: ...

def _pianobar_exists() -> bool: ...
