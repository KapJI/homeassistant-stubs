import abc
import asyncio
import threading
from . import history as history, migration as migration, purge as purge, statistics as statistics, websocket_api as websocket_api
from .const import CONF_DB_INTEGRITY_CHECK as CONF_DB_INTEGRITY_CHECK, DATA_INSTANCE as DATA_INSTANCE, DB_WORKER_PREFIX as DB_WORKER_PREFIX, DOMAIN as DOMAIN, MAX_QUEUE_BACKLOG as MAX_QUEUE_BACKLOG, SQLITE_URL_PREFIX as SQLITE_URL_PREFIX
from .executor import DBInterruptibleThreadPoolExecutor as DBInterruptibleThreadPoolExecutor
from .models import Base as Base, Events as Events, SCHEMA_VERSION as SCHEMA_VERSION, StateAttributes as StateAttributes, States as States, StatisticsRuns as StatisticsRuns, process_timestamp as process_timestamp
from .pool import MutexPool as MutexPool, POOL_SIZE as POOL_SIZE, RecorderPool as RecorderPool
from .run_history import RunHistory as RunHistory
from .util import dburl_to_path as dburl_to_path, end_incomplete_runs as end_incomplete_runs, is_second_sunday as is_second_sunday, move_away_broken_database as move_away_broken_database, periodic_db_cleanups as periodic_db_cleanups, session_scope as session_scope, setup_connection_for_dialect as setup_connection_for_dialect, validate_or_move_away_sqlite_database as validate_or_move_away_sqlite_database, write_lock_db_sqlite as write_lock_db_sqlite
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Iterable
from datetime import datetime
from homeassistant.components import persistent_notification as persistent_notification
from homeassistant.const import ATTR_ENTITY_ID as ATTR_ENTITY_ID, CONF_EXCLUDE as CONF_EXCLUDE, EVENT_HOMEASSISTANT_FINAL_WRITE as EVENT_HOMEASSISTANT_FINAL_WRITE, EVENT_HOMEASSISTANT_STARTED as EVENT_HOMEASSISTANT_STARTED, EVENT_HOMEASSISTANT_STOP as EVENT_HOMEASSISTANT_STOP, EVENT_STATE_CHANGED as EVENT_STATE_CHANGED, MATCH_ALL as MATCH_ALL
from homeassistant.core import CALLBACK_TYPE as CALLBACK_TYPE, CoreState as CoreState, Event as Event, HomeAssistant as HomeAssistant, ServiceCall as ServiceCall, callback as callback
from homeassistant.helpers.entityfilter import INCLUDE_EXCLUDE_BASE_FILTER_SCHEMA as INCLUDE_EXCLUDE_BASE_FILTER_SCHEMA, INCLUDE_EXCLUDE_FILTER_SCHEMA_INNER as INCLUDE_EXCLUDE_FILTER_SCHEMA_INNER, convert_include_exclude_filter as convert_include_exclude_filter, generate_filter as generate_filter
from homeassistant.helpers.event import async_track_time_change as async_track_time_change, async_track_time_interval as async_track_time_interval, async_track_utc_time_change as async_track_utc_time_change
from homeassistant.helpers.integration_platform import async_process_integration_platforms as async_process_integration_platforms
from homeassistant.helpers.service import async_extract_entity_ids as async_extract_entity_ids
from homeassistant.helpers.typing import ConfigType as ConfigType
from homeassistant.loader import bind_hass as bind_hass
from sqlalchemy.engine import Engine as Engine
from sqlalchemy.ext import baked
from sqlalchemy.orm.query import Query as Query
from sqlalchemy.orm.session import Session as Session
from typing import Any, TypeVar

_LOGGER: Incomplete
T = TypeVar('T')
EXCLUDE_ATTRIBUTES: Incomplete
SERVICE_PURGE: str
SERVICE_PURGE_ENTITIES: str
SERVICE_ENABLE: str
SERVICE_DISABLE: str
ATTR_KEEP_DAYS: str
ATTR_REPACK: str
ATTR_APPLY_FILTER: str
SERVICE_PURGE_SCHEMA: Incomplete
ATTR_DOMAINS: str
ATTR_ENTITY_GLOBS: str
SERVICE_PURGE_ENTITIES_SCHEMA: Incomplete
SERVICE_ENABLE_SCHEMA: Incomplete
SERVICE_DISABLE_SCHEMA: Incomplete
DEFAULT_URL: str
DEFAULT_DB_FILE: str
DEFAULT_DB_INTEGRITY_CHECK: bool
DEFAULT_DB_MAX_RETRIES: int
DEFAULT_DB_RETRY_WAIT: int
DEFAULT_COMMIT_INTERVAL: int
KEEPALIVE_TIME: int
EXPIRE_AFTER_COMMITS: int
STATE_ATTRIBUTES_ID_CACHE_SIZE: int
SHUTDOWN_TASK: Incomplete
DB_LOCK_TIMEOUT: int
DB_LOCK_QUEUE_CHECK_TIMEOUT: int
CONF_AUTO_PURGE: str
CONF_AUTO_REPACK: str
CONF_DB_URL: str
CONF_DB_MAX_RETRIES: str
CONF_DB_RETRY_WAIT: str
CONF_PURGE_KEEP_DAYS: str
CONF_PURGE_INTERVAL: str
CONF_EVENT_TYPES: str
CONF_COMMIT_INTERVAL: str
INVALIDATED_ERR: str
CONNECTIVITY_ERR: str
EXCLUDE_SCHEMA: Incomplete
FILTER_SCHEMA: Incomplete
ALLOW_IN_MEMORY_DB: bool

def validate_db_url(db_url: str) -> Any: ...

CONFIG_SCHEMA: Incomplete
MAX_DB_EXECUTOR_WORKERS: Incomplete

def get_instance(hass: HomeAssistant) -> Recorder: ...
def is_entity_recorded(hass: HomeAssistant, entity_id: str) -> bool: ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool: ...
async def _process_recorder_platform(hass: HomeAssistant, domain: str, platform: Any) -> None: ...
def _async_register_services(hass: HomeAssistant, instance: Recorder) -> None: ...

class RecorderTask(abc.ABC, metaclass=abc.ABCMeta):
    commit_before: bool
    @abc.abstractmethod
    def run(self, instance: Recorder) -> None: ...

class ClearStatisticsTask(RecorderTask):
    statistic_ids: list[str]
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, statistic_ids) -> None: ...

class UpdateStatisticsMetadataTask(RecorderTask):
    statistic_id: str
    unit_of_measurement: Union[str, None]
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, statistic_id, unit_of_measurement) -> None: ...

class PurgeTask(RecorderTask):
    purge_before: datetime
    repack: bool
    apply_filter: bool
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, purge_before, repack, apply_filter) -> None: ...

class PurgeEntitiesTask(RecorderTask):
    entity_filter: Callable[[str], bool]
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, entity_filter) -> None: ...

class PerodicCleanupTask(RecorderTask):
    def run(self, instance: Recorder) -> None: ...

class StatisticsTask(RecorderTask):
    start: datetime
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, start) -> None: ...

class ExternalStatisticsTask(RecorderTask):
    metadata: dict
    statistics: Iterable[dict]
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, metadata, statistics) -> None: ...

class AdjustStatisticsTask(RecorderTask):
    statistic_id: str
    start_time: datetime
    sum_adjustment: float
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, statistic_id, start_time, sum_adjustment) -> None: ...

class WaitTask(RecorderTask):
    commit_before: bool
    def run(self, instance: Recorder) -> None: ...

class DatabaseLockTask(RecorderTask):
    database_locked: asyncio.Event
    database_unlock: threading.Event
    queue_overflow: bool
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, database_locked, database_unlock, queue_overflow) -> None: ...

class StopTask(RecorderTask):
    commit_before: bool
    def run(self, instance: Recorder) -> None: ...

class EventTask(RecorderTask):
    event: Event
    commit_before: bool
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, event) -> None: ...

class KeepAliveTask(RecorderTask):
    commit_before: bool
    def run(self, instance: Recorder) -> None: ...

class CommitTask(RecorderTask):
    commit_before: bool
    def run(self, instance: Recorder) -> None: ...

class AddRecorderPlatformTask(RecorderTask):
    domain: str
    platform: Any
    commit_before: bool
    def run(self, instance: Recorder) -> None: ...
    def __init__(self, domain, platform) -> None: ...

COMMIT_TASK: Incomplete
KEEP_ALIVE_TASK: Incomplete

class Recorder(threading.Thread):
    stop_requested: bool
    hass: Incomplete
    auto_purge: Incomplete
    auto_repack: Incomplete
    keep_days: Incomplete
    _hass_started: Incomplete
    commit_interval: Incomplete
    queue: Incomplete
    db_url: Incomplete
    db_max_retries: Incomplete
    db_retry_wait: Incomplete
    async_db_ready: Incomplete
    async_recorder_ready: Incomplete
    _queue_watch: Incomplete
    engine: Incomplete
    run_history: Incomplete
    entity_filter: Incomplete
    exclude_t: Incomplete
    schema_version: int
    _commits_without_expire: int
    _old_states: Incomplete
    _state_attributes_ids: Incomplete
    _pending_state_attributes: Incomplete
    _pending_expunge: Incomplete
    _bakery: Incomplete
    _find_shared_attr_query: Incomplete
    event_session: Incomplete
    get_session: Incomplete
    _completed_first_database_setup: Incomplete
    _event_listener: Incomplete
    async_migration_event: Incomplete
    migration_in_progress: bool
    _queue_watcher: Incomplete
    _db_supports_row_number: bool
    _database_lock_task: Incomplete
    _db_executor: Incomplete
    _exclude_attributes_by_domain: Incomplete
    _keep_alive_listener: Incomplete
    _commit_listener: Incomplete
    _periodic_listener: Incomplete
    _nightly_listener: Incomplete
    enabled: bool
    def __init__(self, hass: HomeAssistant, auto_purge: bool, auto_repack: bool, keep_days: int, commit_interval: int, uri: str, db_max_retries: int, db_retry_wait: int, entity_filter: Callable[[str], bool], exclude_t: list[str], exclude_attributes_by_domain: dict[str, set[str]], bakery: baked.bakery) -> None: ...
    def set_enable(self, enable: bool) -> None: ...
    def async_start_executor(self) -> None: ...
    def _shutdown_pool(self) -> None: ...
    def async_initialize(self) -> None: ...
    def _async_keep_alive(self, now: datetime) -> None: ...
    def _async_commit(self, now: datetime) -> None: ...
    def async_add_executor_job(self, target: Callable[..., T], *args: Any) -> asyncio.Future[T]: ...
    def _stop_executor(self) -> None: ...
    def _async_check_queue(self, *_: Any) -> None: ...
    def _async_stop_queue_watcher_and_event_listener(self) -> None: ...
    def _async_stop_listeners(self) -> None: ...
    def _async_event_filter(self, event: Event) -> bool: ...
    def do_adhoc_purge(self, **kwargs: Any) -> None: ...
    def do_adhoc_purge_entities(self, entity_ids: set[str], domains: list[str], entity_globs: list[str]) -> None: ...
    def do_adhoc_statistics(self, **kwargs: Any) -> None: ...
    def async_register(self) -> None: ...
    def async_connection_failed(self) -> None: ...
    def async_connection_success(self) -> None: ...
    def _async_recorder_ready(self) -> None: ...
    def async_nightly_tasks(self, now: datetime) -> None: ...
    def async_periodic_statistics(self, now: datetime) -> None: ...
    def async_adjust_statistics(self, statistic_id: str, start_time: datetime, sum_adjustment: float) -> None: ...
    def async_clear_statistics(self, statistic_ids: list[str]) -> None: ...
    def async_update_statistics_metadata(self, statistic_id: str, unit_of_measurement: Union[str, None]) -> None: ...
    def async_external_statistics(self, metadata: dict, stats: Iterable[dict]) -> None: ...
    def using_sqlite(self) -> bool: ...
    def _async_setup_periodic_tasks(self) -> None: ...
    async def _async_wait_for_started(self) -> Union[object, None]: ...
    def _wait_startup_or_shutdown(self) -> Union[object, None]: ...
    def run(self) -> None: ...
    def _run_event_loop(self) -> None: ...
    def _process_one_task_or_recover(self, task: RecorderTask) -> None: ...
    def _setup_recorder(self) -> Union[None, int]: ...
    def _async_migration_started(self) -> None: ...
    def _migrate_schema_and_setup_run(self, current_version: int) -> bool: ...
    def _lock_database(self, task: DatabaseLockTask) -> None: ...
    def _process_one_event(self, event: Event) -> None: ...
    def _find_shared_attr_in_db(self, attr_hash: int, shared_attrs: str) -> Union[int, None]: ...
    def _process_event_into_session(self, event: Event) -> None: ...
    def _handle_database_error(self, err: Exception) -> bool: ...
    def _event_session_has_pending_writes(self) -> bool: ...
    def _commit_event_session_or_retry(self) -> None: ...
    def _commit_event_session(self) -> None: ...
    def _handle_sqlite_corruption(self) -> None: ...
    def _close_event_session(self) -> None: ...
    def _reopen_event_session(self) -> None: ...
    def _open_event_session(self) -> None: ...
    def _send_keep_alive(self) -> None: ...
    def event_listener(self, event: Event) -> None: ...
    def block_till_done(self) -> None: ...
    async def lock_database(self) -> bool: ...
    def unlock_database(self) -> bool: ...
    def _setup_connection(self) -> None: ...
    @property
    def _using_file_sqlite(self) -> bool: ...
    def _close_connection(self) -> None: ...
    def _setup_run(self) -> None: ...
    def _schedule_compile_missing_statistics(self, session: Session) -> None: ...
    def _end_session(self) -> None: ...
    def _shutdown(self) -> None: ...
    @property
    def recording(self) -> bool: ...
