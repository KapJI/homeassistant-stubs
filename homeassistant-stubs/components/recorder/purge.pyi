from . import Recorder as Recorder
from .const import MAX_ROWS_TO_PURGE as MAX_ROWS_TO_PURGE, SupportedDialect as SupportedDialect
from .db_schema import Events as Events, StateAttributes as StateAttributes, States as States
from .queries import attributes_ids_exist_in_states as attributes_ids_exist_in_states, attributes_ids_exist_in_states_sqlite as attributes_ids_exist_in_states_sqlite, data_ids_exist_in_events as data_ids_exist_in_events, data_ids_exist_in_events_sqlite as data_ids_exist_in_events_sqlite, delete_event_data_rows as delete_event_data_rows, delete_event_rows as delete_event_rows, delete_recorder_runs_rows as delete_recorder_runs_rows, delete_states_attributes_rows as delete_states_attributes_rows, delete_states_rows as delete_states_rows, delete_statistics_runs_rows as delete_statistics_runs_rows, delete_statistics_short_term_rows as delete_statistics_short_term_rows, disconnect_states_rows as disconnect_states_rows, find_events_to_purge as find_events_to_purge, find_latest_statistics_runs_run_id as find_latest_statistics_runs_run_id, find_legacy_event_state_and_attributes_and_data_ids_to_purge as find_legacy_event_state_and_attributes_and_data_ids_to_purge, find_legacy_row as find_legacy_row, find_short_term_statistics_to_purge as find_short_term_statistics_to_purge, find_states_to_purge as find_states_to_purge, find_statistics_runs_to_purge as find_statistics_runs_to_purge
from .repack import repack_database as repack_database
from .util import retryable_database_job as retryable_database_job, session_scope as session_scope
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Iterable
from datetime import datetime
from homeassistant.const import EVENT_STATE_CHANGED as EVENT_STATE_CHANGED
from sqlalchemy.orm.session import Session as Session
from typing import Any

_LOGGER: Incomplete
DEFAULT_STATES_BATCHES_PER_PURGE: int
DEFAULT_EVENTS_BATCHES_PER_PURGE: int

def take(take_num: int, iterable: Iterable) -> list[Any]: ...
def chunked(iterable: Iterable, chunked_num: int) -> Iterable[Any]: ...
def purge_old_data(instance: Recorder, purge_before: datetime, repack: bool, apply_filter: bool = ..., events_batch_size: int = ..., states_batch_size: int = ...) -> bool: ...
def _purging_legacy_format(session: Session) -> bool: ...
def _purge_legacy_format(instance: Recorder, session: Session, purge_before: datetime, using_sqlite: bool) -> bool: ...
def _purge_states_and_attributes_ids(instance: Recorder, session: Session, states_batch_size: int, purge_before: datetime, using_sqlite: bool) -> bool: ...
def _purge_events_and_data_ids(instance: Recorder, session: Session, events_batch_size: int, purge_before: datetime, using_sqlite: bool) -> bool: ...
def _select_state_attributes_ids_to_purge(session: Session, purge_before: datetime) -> tuple[set[int], set[int]]: ...
def _select_event_data_ids_to_purge(session: Session, purge_before: datetime) -> tuple[set[int], set[int]]: ...
def _select_unused_attributes_ids(session: Session, attributes_ids: set[int], using_sqlite: bool) -> set[int]: ...
def _purge_unused_attributes_ids(instance: Recorder, session: Session, attributes_ids_batch: set[int], using_sqlite: bool) -> None: ...
def _select_unused_event_data_ids(session: Session, data_ids: set[int], using_sqlite: bool) -> set[int]: ...
def _purge_unused_data_ids(instance: Recorder, session: Session, data_ids_batch: set[int], using_sqlite: bool) -> None: ...
def _select_statistics_runs_to_purge(session: Session, purge_before: datetime) -> list[int]: ...
def _select_short_term_statistics_to_purge(session: Session, purge_before: datetime) -> list[int]: ...
def _select_legacy_event_state_and_attributes_and_data_ids_to_purge(session: Session, purge_before: datetime) -> tuple[set[int], set[int], set[int], set[int]]: ...
def _purge_state_ids(instance: Recorder, session: Session, state_ids: set[int]) -> None: ...
def _evict_purged_states_from_old_states_cache(instance: Recorder, purged_state_ids: set[int]) -> None: ...
def _evict_purged_data_from_data_cache(instance: Recorder, purged_data_ids: set[int]) -> None: ...
def _evict_purged_attributes_from_attributes_cache(instance: Recorder, purged_attributes_ids: set[int]) -> None: ...
def _purge_batch_attributes_ids(instance: Recorder, session: Session, attributes_ids: set[int]) -> None: ...
def _purge_batch_data_ids(instance: Recorder, session: Session, data_ids: set[int]) -> None: ...
def _purge_statistics_runs(session: Session, statistics_runs: list[int]) -> None: ...
def _purge_short_term_statistics(session: Session, short_term_statistics: list[int]) -> None: ...
def _purge_event_ids(session: Session, event_ids: Iterable[int]) -> None: ...
def _purge_old_recorder_runs(instance: Recorder, session: Session, purge_before: datetime) -> None: ...
def _purge_filtered_data(instance: Recorder, session: Session) -> bool: ...
def _purge_filtered_states(instance: Recorder, session: Session, excluded_entity_ids: list[str], using_sqlite: bool) -> None: ...
def _purge_filtered_events(instance: Recorder, session: Session, excluded_event_types: list[str]) -> None: ...
def purge_entity_data(instance: Recorder, entity_filter: Callable[[str], bool]) -> bool: ...
