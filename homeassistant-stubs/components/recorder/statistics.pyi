from . import Recorder as Recorder
from .const import DOMAIN as DOMAIN
from .models import StatisticData as StatisticData, StatisticMetaData as StatisticMetaData, StatisticResult as StatisticResult, Statistics as Statistics, StatisticsMeta as StatisticsMeta, StatisticsRuns as StatisticsRuns, StatisticsShortTerm as StatisticsShortTerm, process_timestamp as process_timestamp, process_timestamp_to_utc_isoformat as process_timestamp_to_utc_isoformat
from .util import execute as execute, retryable_database_job as retryable_database_job, session_scope as session_scope
from collections.abc import Callable as Callable, Iterable
from datetime import datetime, timedelta
from homeassistant.const import PRESSURE_PA as PRESSURE_PA, TEMP_CELSIUS as TEMP_CELSIUS, VOLUME_CUBIC_FEET as VOLUME_CUBIC_FEET, VOLUME_CUBIC_METERS as VOLUME_CUBIC_METERS
from homeassistant.core import Event as Event, HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers import entity_registry as entity_registry
from homeassistant.util.unit_system import UnitSystem as UnitSystem
from sqlalchemy.orm.scoping import scoped_session as scoped_session
from typing import Any, Literal

QUERY_STATISTICS: Any
QUERY_STATISTICS_SHORT_TERM: Any
QUERY_STATISTICS_SUMMARY_MEAN: Any
QUERY_STATISTICS_SUMMARY_SUM: Any
QUERY_STATISTIC_META: Any
QUERY_STATISTIC_META_ID: Any
STATISTICS_BAKERY: str
STATISTICS_META_BAKERY: str
STATISTICS_SHORT_TERM_BAKERY: str
UNIT_CONVERSIONS: Any
_LOGGER: Any

class ValidationIssue:
    type: str
    data: Union[dict[str, Union[str, None]], None]
    def as_dict(self) -> dict: ...

def async_setup(hass: HomeAssistant) -> None: ...
def get_start_time() -> datetime: ...
def _update_or_add_metadata(hass: HomeAssistant, session: scoped_session, new_metadata: StatisticMetaData) -> int: ...
def compile_hourly_statistics(instance: Recorder, session: scoped_session, start: datetime) -> None: ...
def compile_statistics(instance: Recorder, start: datetime) -> bool: ...
def get_metadata_with_session(hass: HomeAssistant, session: scoped_session, statistic_ids: Union[Iterable[str], None], statistic_type: Union[Literal[mean], Literal[sum], None]) -> dict[str, tuple[int, StatisticMetaData]]: ...
def get_metadata(hass: HomeAssistant, statistic_ids: Iterable[str]) -> dict[str, tuple[int, StatisticMetaData]]: ...
def _configured_unit(unit: str, units: UnitSystem) -> str: ...
def clear_statistics(instance: Recorder, statistic_ids: list[str]) -> None: ...
def update_statistics_metadata(instance: Recorder, statistic_id: str, unit_of_measurement: Union[str, None]) -> None: ...
def list_statistic_ids(hass: HomeAssistant, statistic_type: Union[Literal[mean], Literal[sum], None] = ...) -> list[Union[dict, None]]: ...
def _statistics_during_period_query(hass: HomeAssistant, end_time: Union[datetime, None], statistic_ids: Union[list[str], None], bakery: Any, base_query: Iterable, table: type[Union[Statistics, StatisticsShortTerm]]) -> Callable: ...
def statistics_during_period(hass: HomeAssistant, start_time: datetime, end_time: Union[datetime, None] = ..., statistic_ids: Union[list[str], None] = ..., period: Union[Literal[hour], Literal['5minute']] = ...) -> dict[str, list[dict[str, str]]]: ...
def get_last_statistics(hass: HomeAssistant, number_of_stats: int, statistic_id: str, convert_units: bool) -> dict[str, list[dict]]: ...
def _sorted_statistics_to_dict(hass: HomeAssistant, stats: list, statistic_ids: Union[list[str], None], _metadata: dict[str, tuple[int, StatisticMetaData]], convert_units: bool, duration: timedelta) -> dict[str, list[dict]]: ...
def validate_statistics(hass: HomeAssistant) -> dict[str, list[ValidationIssue]]: ...
