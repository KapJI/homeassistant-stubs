from . import RussoundConfigEntry as RussoundConfigEntry
from .const import DOMAIN as DOMAIN, MP_FEATURES_BY_FLAG as MP_FEATURES_BY_FLAG
from .entity import RussoundBaseEntity as RussoundBaseEntity, command as command
from _typeshed import Incomplete
from aiorussound import Controller as Controller
from aiorussound.models import Source as Source
from aiorussound.rio import ZoneControlSurface as ZoneControlSurface
from homeassistant.components.media_player import MediaPlayerDeviceClass as MediaPlayerDeviceClass, MediaPlayerEntity as MediaPlayerEntity, MediaPlayerEntityFeature as MediaPlayerEntityFeature, MediaPlayerState as MediaPlayerState, MediaType as MediaType
from homeassistant.config_entries import SOURCE_IMPORT as SOURCE_IMPORT
from homeassistant.core import HomeAssistant as HomeAssistant
from homeassistant.data_entry_flow import FlowResultType as FlowResultType
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from homeassistant.helpers.issue_registry import IssueSeverity as IssueSeverity, async_create_issue as async_create_issue
from homeassistant.helpers.typing import ConfigType as ConfigType, DiscoveryInfoType as DiscoveryInfoType

_LOGGER: Incomplete
PARALLEL_UPDATES: int

async def async_setup_platform(hass: HomeAssistant, config: ConfigType, async_add_entities: AddEntitiesCallback, discovery_info: DiscoveryInfoType | None = None) -> None: ...
async def async_setup_entry(hass: HomeAssistant, entry: RussoundConfigEntry, async_add_entities: AddEntitiesCallback) -> None: ...

class RussoundZoneDevice(RussoundBaseEntity, MediaPlayerEntity):
    _attr_device_class: Incomplete
    _attr_media_content_type: Incomplete
    _attr_supported_features: Incomplete
    _zone_id: Incomplete
    _sources: Incomplete
    _attr_name: Incomplete
    _attr_unique_id: Incomplete
    def __init__(self, controller: Controller, zone_id: int, sources: dict[int, Source]) -> None: ...
    @property
    def _zone(self) -> ZoneControlSurface: ...
    @property
    def _source(self) -> Source: ...
    @property
    def state(self) -> MediaPlayerState | None: ...
    @property
    def source(self) -> str: ...
    @property
    def source_list(self) -> list[str]: ...
    @property
    def media_title(self) -> str | None: ...
    @property
    def media_artist(self) -> str | None: ...
    @property
    def media_album_name(self) -> str | None: ...
    @property
    def media_image_url(self) -> str | None: ...
    @property
    def volume_level(self) -> float: ...
    async def async_turn_off(self) -> None: ...
    async def async_turn_on(self) -> None: ...
    async def async_set_volume_level(self, volume: float) -> None: ...
    async def async_select_source(self, source: str) -> None: ...
    async def async_volume_up(self) -> None: ...
    async def async_volume_down(self) -> None: ...
