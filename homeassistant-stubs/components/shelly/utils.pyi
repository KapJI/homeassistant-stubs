from .const import BASIC_INPUTS_EVENTS_TYPES as BASIC_INPUTS_EVENTS_TYPES, CONF_COAP_PORT as CONF_COAP_PORT, DEFAULT_COAP_PORT as DEFAULT_COAP_PORT, DOMAIN as DOMAIN, MAX_RPC_KEY_INSTANCES as MAX_RPC_KEY_INSTANCES, RPC_INPUTS_EVENTS_TYPES as RPC_INPUTS_EVENTS_TYPES, SHBTN_INPUTS_EVENTS_TYPES as SHBTN_INPUTS_EVENTS_TYPES, SHBTN_MODELS as SHBTN_MODELS, SHIX3_1_INPUTS_EVENTS_TYPES as SHIX3_1_INPUTS_EVENTS_TYPES, UPTIME_DEVIATION as UPTIME_DEVIATION
from aioshelly.block_device import Block as Block, BlockDevice as BlockDevice, COAP
from aioshelly.rpc_device import RpcDevice as RpcDevice
from datetime import datetime
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.const import EVENT_HOMEASSISTANT_STOP as EVENT_HOMEASSISTANT_STOP, TEMP_CELSIUS as TEMP_CELSIUS, TEMP_FAHRENHEIT as TEMP_FAHRENHEIT
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers import device_registry as device_registry, singleton as singleton
from homeassistant.helpers.typing import EventType as EventType
from homeassistant.util.dt import utcnow as utcnow
from typing import Any, Final

_LOGGER: Final[Any]

async def async_remove_shelly_entity(hass: HomeAssistant, domain: str, unique_id: str) -> None: ...
def temperature_unit(block_info: dict[str, Any]) -> str: ...
def get_block_device_name(device: BlockDevice) -> str: ...
def get_rpc_device_name(device: RpcDevice) -> str: ...
def get_number_of_channels(device: BlockDevice, block: Block) -> int: ...
def get_block_entity_name(device: BlockDevice, block: Union[Block, None], description: Union[str, None] = ...) -> str: ...
def get_block_channel_name(device: BlockDevice, block: Union[Block, None]) -> str: ...
def is_block_momentary_input(settings: dict[str, Any], block: Block, include_detached: bool = ...) -> bool: ...
def get_device_uptime(uptime: float, last_uptime: Union[datetime, None]) -> datetime: ...
def get_block_input_triggers(device: BlockDevice, block: Block) -> list[tuple[str, str]]: ...
def get_shbtn_input_triggers() -> list[tuple[str, str]]: ...
async def get_coap_context(hass: HomeAssistant) -> COAP: ...
def get_block_device_sleep_period(settings: dict[str, Any]) -> int: ...
def get_info_auth(info: dict[str, Any]) -> bool: ...
def get_info_gen(info: dict[str, Any]) -> int: ...
def get_model_name(info: dict[str, Any]) -> str: ...
def get_rpc_channel_name(device: RpcDevice, key: str) -> str: ...
def get_rpc_entity_name(device: RpcDevice, key: str, description: Union[str, None] = ...) -> str: ...
def get_device_entry_gen(entry: ConfigEntry) -> int: ...
def get_rpc_key_instances(keys_dict: dict[str, Any], key: str) -> list[str]: ...
def get_rpc_key_ids(keys_dict: dict[str, Any], key: str) -> list[int]: ...
def is_rpc_momentary_input(config: dict[str, Any], key: str) -> bool: ...
def is_block_channel_type_light(settings: dict[str, Any], channel: int) -> bool: ...
def is_rpc_channel_type_light(config: dict[str, Any], channel: int) -> bool: ...
def get_rpc_input_triggers(device: RpcDevice) -> list[tuple[str, str]]: ...
def device_update_info(hass: HomeAssistant, shellydevice: Union[BlockDevice, RpcDevice], entry: ConfigEntry) -> None: ...
