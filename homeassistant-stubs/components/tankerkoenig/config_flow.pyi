from .const import CONF_STATIONS as CONF_STATIONS, DEFAULT_RADIUS as DEFAULT_RADIUS, DOMAIN as DOMAIN
from .coordinator import TankerkoenigConfigEntry as TankerkoenigConfigEntry
from aiotankerkoenig import Station as Station, Tankerkoenig
from collections.abc import Mapping
from homeassistant.config_entries import ConfigFlow as ConfigFlow, ConfigFlowResult as ConfigFlowResult, OptionsFlowWithReload as OptionsFlowWithReload
from homeassistant.const import CONF_API_KEY as CONF_API_KEY, CONF_LATITUDE as CONF_LATITUDE, CONF_LOCATION as CONF_LOCATION, CONF_LONGITUDE as CONF_LONGITUDE, CONF_NAME as CONF_NAME, CONF_RADIUS as CONF_RADIUS, CONF_SHOW_ON_MAP as CONF_SHOW_ON_MAP, UnitOfLength as UnitOfLength
from homeassistant.core import callback as callback
from homeassistant.helpers.aiohttp_client import async_get_clientsession as async_get_clientsession
from homeassistant.helpers.selector import LocationSelector as LocationSelector, NumberSelector as NumberSelector, NumberSelectorConfig as NumberSelectorConfig
from typing import Any

async def async_get_nearby_stations(tankerkoenig: Tankerkoenig, data: Mapping[str, Any]) -> list[Station]: ...

class FlowHandler(ConfigFlow, domain=DOMAIN):
    VERSION: int
    _data: dict[str, Any]
    _stations: dict[str, str]
    def __init__(self) -> None: ...
    @staticmethod
    @callback
    def async_get_options_flow(config_entry: TankerkoenigConfigEntry) -> OptionsFlowHandler: ...
    async def async_step_user(self, user_input: dict[str, Any] | None = None) -> ConfigFlowResult: ...
    async def async_step_select_station(self, user_input: dict[str, Any] | None = None) -> ConfigFlowResult: ...
    async def async_step_reauth(self, entry_data: Mapping[str, Any]) -> ConfigFlowResult: ...
    async def async_step_reauth_confirm(self, user_input: dict[str, Any] | None = None) -> ConfigFlowResult: ...
    def _show_form_user(self, user_input: dict[str, Any] | None = None, errors: dict[str, Any] | None = None) -> ConfigFlowResult: ...
    def _show_form_reauth(self, user_input: dict[str, Any] | None = None, errors: dict[str, Any] | None = None) -> ConfigFlowResult: ...
    def _create_entry(self, data: dict[str, Any], options: dict[str, Any]) -> ConfigFlowResult: ...

class OptionsFlowHandler(OptionsFlowWithReload):
    _stations: dict[str, str]
    def __init__(self) -> None: ...
    async def async_step_init(self, user_input: dict[str, Any] | None = None) -> ConfigFlowResult: ...
