from .const import CONF_AES_KEYS as CONF_AES_KEYS, CONF_CONFIG_ENTRY_MINOR_VERSION as CONF_CONFIG_ENTRY_MINOR_VERSION, CONF_CONNECTION_PARAMETERS as CONF_CONNECTION_PARAMETERS, CONF_CREDENTIALS_HASH as CONF_CREDENTIALS_HASH, CONF_DEVICE_CONFIG as CONF_DEVICE_CONFIG, CONF_USES_HTTP as CONF_USES_HTTP, CONNECT_TIMEOUT as CONNECT_TIMEOUT, DISCOVERY_TIMEOUT as DISCOVERY_TIMEOUT, DOMAIN as DOMAIN, PLATFORMS as PLATFORMS
from .coordinator import TPLinkDataUpdateCoordinator as TPLinkDataUpdateCoordinator
from .models import TPLinkData as TPLinkData
from _typeshed import Incomplete
from aiohttp import ClientSession as ClientSession
from collections.abc import Iterable
from homeassistant import config_entries as config_entries
from homeassistant.components import network as network
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.const import CONF_ALIAS as CONF_ALIAS, CONF_AUTHENTICATION as CONF_AUTHENTICATION, CONF_DEVICE as CONF_DEVICE, CONF_HOST as CONF_HOST, CONF_MAC as CONF_MAC, CONF_MODEL as CONF_MODEL, CONF_PASSWORD as CONF_PASSWORD, CONF_PORT as CONF_PORT, CONF_USERNAME as CONF_USERNAME
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.exceptions import ConfigEntryAuthFailed as ConfigEntryAuthFailed, ConfigEntryNotReady as ConfigEntryNotReady
from homeassistant.helpers import device_registry as dr, discovery_flow as discovery_flow
from homeassistant.helpers.aiohttp_client import async_create_clientsession as async_create_clientsession
from homeassistant.helpers.event import async_track_time_interval as async_track_time_interval
from homeassistant.helpers.typing import ConfigType as ConfigType
from kasa import Credentials, Device

type TPLinkConfigEntry = ConfigEntry[TPLinkData]
DISCOVERY_INTERVAL: Incomplete
CONFIG_SCHEMA: Incomplete
_LOGGER: Incomplete

def create_async_tplink_clientsession(hass: HomeAssistant) -> ClientSession: ...
def async_trigger_discovery(hass: HomeAssistant, discovered_devices: dict[str, Device]) -> None: ...
async def async_discover_devices(hass: HomeAssistant) -> dict[str, Device]: ...
async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool: ...
async def async_setup_entry(hass: HomeAssistant, entry: TPLinkConfigEntry) -> bool: ...
async def async_unload_entry(hass: HomeAssistant, entry: TPLinkConfigEntry) -> bool: ...
def legacy_device_id(device: Device) -> str: ...
def get_device_name(device: Device, parent: Device | None = None) -> str: ...
async def get_credentials(hass: HomeAssistant) -> Credentials | None: ...
async def set_credentials(hass: HomeAssistant, username: str, password: str) -> None: ...
def mac_alias(mac: str) -> str: ...
def _mac_connection_or_none(device: dr.DeviceEntry) -> str | None: ...
def _device_id_is_mac_or_none(mac: str, device_ids: Iterable[str]) -> str | None: ...
async def async_migrate_entry(hass: HomeAssistant, config_entry: ConfigEntry) -> bool: ...
