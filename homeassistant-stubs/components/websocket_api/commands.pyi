from . import const as const, decorators as decorators, messages as messages
from homeassistant.auth.permissions.const import CAT_ENTITIES as CAT_ENTITIES, POLICY_READ as POLICY_READ
from homeassistant.components.websocket_api.const import ERR_NOT_FOUND as ERR_NOT_FOUND
from homeassistant.const import EVENT_STATE_CHANGED as EVENT_STATE_CHANGED, EVENT_TIME_CHANGED as EVENT_TIME_CHANGED, MATCH_ALL as MATCH_ALL
from homeassistant.core import callback as callback
from homeassistant.exceptions import HomeAssistantError as HomeAssistantError, ServiceNotFound as ServiceNotFound, TemplateError as TemplateError, Unauthorized as Unauthorized
from homeassistant.helpers import entity as entity, template as template
from homeassistant.helpers.event import TrackTemplate as TrackTemplate, async_track_template_result as async_track_template_result
from homeassistant.helpers.service import async_get_all_descriptions as async_get_all_descriptions
from homeassistant.loader import IntegrationNotFound as IntegrationNotFound, async_get_integration as async_get_integration
from homeassistant.setup import async_get_loaded_integrations as async_get_loaded_integrations
from typing import Any

def async_register_commands(hass: Any, async_reg: Any) -> None: ...
def pong_message(iden: Any): ...
def handle_subscribe_events(hass: Any, connection: Any, msg: Any) -> None: ...
def handle_unsubscribe_events(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_call_service(hass: Any, connection: Any, msg: Any) -> None: ...
def handle_get_states(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_get_services(hass: Any, connection: Any, msg: Any) -> None: ...
def handle_get_config(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_manifest_list(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_manifest_get(hass: Any, connection: Any, msg: Any) -> None: ...
def handle_ping(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_render_template(hass: Any, connection: Any, msg: Any) -> None: ...
def handle_entity_source(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_subscribe_trigger(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_test_condition(hass: Any, connection: Any, msg: Any) -> None: ...
async def handle_execute_script(hass: Any, connection: Any, msg: Any) -> None: ...
