from .addon import AddonError as AddonError, AddonManager as AddonManager, get_addon_manager as get_addon_manager
from .const import CONF_ADDON_DEVICE as CONF_ADDON_DEVICE, CONF_ADDON_NETWORK_KEY as CONF_ADDON_NETWORK_KEY, CONF_INTEGRATION_CREATED_ADDON as CONF_INTEGRATION_CREATED_ADDON, CONF_NETWORK_KEY as CONF_NETWORK_KEY, CONF_USB_PATH as CONF_USB_PATH, CONF_USE_ADDON as CONF_USE_ADDON, DOMAIN as DOMAIN
from homeassistant import config_entries as config_entries, exceptions as exceptions
from homeassistant.components.hassio import is_hassio as is_hassio
from homeassistant.const import CONF_URL as CONF_URL
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.data_entry_flow import AbortFlow as AbortFlow
from homeassistant.helpers.aiohttp_client import async_get_clientsession as async_get_clientsession
from typing import Any
from zwave_js_server.version import VersionInfo as VersionInfo

_LOGGER: Any
DEFAULT_URL: str
TITLE: str
ADDON_SETUP_TIMEOUT: int
ADDON_SETUP_TIMEOUT_ROUNDS: int
SERVER_VERSION_TIMEOUT: int
ON_SUPERVISOR_SCHEMA: Any
STEP_USER_DATA_SCHEMA: Any

async def validate_input(hass: HomeAssistant, user_input: dict) -> VersionInfo: ...
async def async_get_version_info(hass: HomeAssistant, ws_address: str) -> VersionInfo: ...

class ConfigFlow(config_entries.ConfigFlow):
    VERSION: int = ...
    CONNECTION_CLASS: Any = ...
    network_key: Any = ...
    usb_path: Any = ...
    use_addon: bool = ...
    ws_address: Any = ...
    integration_created_addon: bool = ...
    install_task: Any = ...
    start_task: Any = ...
    def __init__(self) -> None: ...
    async def async_step_user(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_manual(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_hassio(self, discovery_info: dict[str, Any]) -> dict[str, Any]: ...
    async def async_step_hassio_confirm(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    def _async_create_entry_from_vars(self) -> dict[str, Any]: ...
    async def async_step_on_supervisor(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_install_addon(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_install_failed(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_configure_addon(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_start_addon(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def async_step_start_failed(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def _async_start_addon(self) -> None: ...
    async def async_step_finish_addon_setup(self, user_input: Union[dict[str, Any], None]=...) -> dict[str, Any]: ...
    async def _async_get_addon_info(self) -> dict: ...
    async def _async_is_addon_running(self) -> bool: ...
    async def _async_is_addon_installed(self) -> bool: ...
    async def _async_get_addon_config(self) -> dict: ...
    async def _async_set_addon_config(self, config: dict) -> None: ...
    async def _async_install_addon(self) -> None: ...
    async def _async_get_addon_discovery_info(self) -> dict: ...

class CannotConnect(exceptions.HomeAssistantError): ...

class InvalidInput(exceptions.HomeAssistantError):
    error: Any = ...
    def __init__(self, error: str) -> None: ...
