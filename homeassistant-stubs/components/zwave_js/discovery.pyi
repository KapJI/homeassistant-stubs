from homeassistant.core import callback as callback
from typing import Any, Generator, List, Optional, Set, Union
from zwave_js_server.model.device_class import DeviceClassItem as DeviceClassItem
from zwave_js_server.model.node import Node as ZwaveNode
from zwave_js_server.model.value import Value as ZwaveValue

class ZwaveDiscoveryInfo:
    node: ZwaveNode
    primary_value: ZwaveValue
    platform: str
    platform_hint: Optional[str] = ...
    def __init__(self, node: Any, primary_value: Any, platform: Any, platform_hint: Any) -> None: ...

class ZWaveValueDiscoverySchema:
    command_class: Optional[Set[int]] = ...
    endpoint: Optional[Set[int]] = ...
    property: Optional[Set[Union[str, int]]] = ...
    type: Optional[Set[str]] = ...
    def __init__(self, command_class: Any, endpoint: Any, property: Any, type: Any) -> None: ...

class ZWaveDiscoverySchema:
    platform: str
    primary_value: ZWaveValueDiscoverySchema
    hint: Optional[str] = ...
    manufacturer_id: Optional[Set[int]] = ...
    product_id: Optional[Set[int]] = ...
    product_type: Optional[Set[int]] = ...
    firmware_version: Optional[Set[str]] = ...
    device_class_basic: Optional[Set[Union[str, int]]] = ...
    device_class_generic: Optional[Set[Union[str, int]]] = ...
    device_class_specific: Optional[Set[Union[str, int]]] = ...
    required_values: Optional[List[ZWaveValueDiscoverySchema]] = ...
    absent_values: Optional[List[ZWaveValueDiscoverySchema]] = ...
    allow_multi: bool = ...
    def __init__(self, platform: Any, primary_value: Any, hint: Any, manufacturer_id: Any, product_id: Any, product_type: Any, firmware_version: Any, device_class_basic: Any, device_class_generic: Any, device_class_specific: Any, required_values: Any, absent_values: Any, allow_multi: Any) -> None: ...

SWITCH_MULTILEVEL_CURRENT_VALUE_SCHEMA: Any
DISCOVERY_SCHEMAS: Any

def async_discover_values(node: ZwaveNode) -> Generator[ZwaveDiscoveryInfo, None, None]: ...
def check_value(value: ZwaveValue, schema: ZWaveValueDiscoverySchema) -> bool: ...
def check_device_class(device_class: DeviceClassItem, required_value: Optional[Set[Union[str, int]]]) -> bool: ...
