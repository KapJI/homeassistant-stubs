from .const import DATA_CLIENT as DATA_CLIENT, DATA_UNSUBSCRIBE as DATA_UNSUBSCRIBE, DOMAIN as DOMAIN
from .discovery import ZwaveDiscoveryInfo as ZwaveDiscoveryInfo
from .entity import ZWaveBaseEntity as ZWaveBaseEntity
from homeassistant.components.light import ATTR_BRIGHTNESS as ATTR_BRIGHTNESS, ATTR_COLOR_TEMP as ATTR_COLOR_TEMP, ATTR_HS_COLOR as ATTR_HS_COLOR, ATTR_TRANSITION as ATTR_TRANSITION, ATTR_WHITE_VALUE as ATTR_WHITE_VALUE, LightEntity as LightEntity, SUPPORT_BRIGHTNESS as SUPPORT_BRIGHTNESS, SUPPORT_COLOR as SUPPORT_COLOR, SUPPORT_COLOR_TEMP as SUPPORT_COLOR_TEMP, SUPPORT_TRANSITION as SUPPORT_TRANSITION, SUPPORT_WHITE_VALUE as SUPPORT_WHITE_VALUE
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers.dispatcher import async_dispatcher_connect as async_dispatcher_connect
from typing import Any, Callable
from zwave_js_server.client import Client as ZwaveClient
from zwave_js_server.const import ColorComponent

LOGGER: Any
MULTI_COLOR_MAP: Any

async def async_setup_entry(hass: HomeAssistant, config_entry: ConfigEntry, async_add_entities: Callable) -> None: ...
def byte_to_zwave_brightness(value: int) -> int: ...

class ZwaveLight(ZWaveBaseEntity, LightEntity):
    _supports_color: bool = ...
    _supports_white_value: bool = ...
    _supports_color_temp: bool = ...
    _hs_color: Any = ...
    _white_value: Any = ...
    _color_temp: Any = ...
    _min_mireds: int = ...
    _max_mireds: int = ...
    _supported_features: Any = ...
    _target_value: Any = ...
    _dimming_duration: Any = ...
    def __init__(self, config_entry: ConfigEntry, client: ZwaveClient, info: ZwaveDiscoveryInfo) -> None: ...
    def on_value_update(self) -> None: ...
    @property
    def brightness(self) -> int: ...
    @property
    def is_on(self) -> bool: ...
    @property
    def hs_color(self) -> Union[tuple[float, float], None]: ...
    @property
    def white_value(self) -> Union[int, None]: ...
    @property
    def color_temp(self) -> Union[int, None]: ...
    @property
    def min_mireds(self) -> int: ...
    @property
    def max_mireds(self) -> int: ...
    @property
    def supported_features(self) -> int: ...
    async def async_turn_on(self, **kwargs: Any) -> None: ...
    async def async_turn_off(self, **kwargs: Any) -> None: ...
    async def _async_set_colors(self, colors: dict[ColorComponent, int]) -> None: ...
    async def _async_set_color(self, color: ColorComponent, new_value: int) -> None: ...
    async def _async_set_brightness(self, brightness: Union[int, None], transition: Union[int, None]=...) -> None: ...
    async def _async_set_transition_duration(self, duration: Union[int, None]=...) -> None: ...
    def _calculate_color_values(self) -> None: ...
