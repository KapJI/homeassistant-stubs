from .const import DATA_CLIENT as DATA_CLIENT, DOMAIN as DOMAIN
from .discovery import ZwaveDiscoveryInfo as ZwaveDiscoveryInfo
from .entity import ZWaveBaseEntity as ZWaveBaseEntity
from _typeshed import Incomplete
from homeassistant.components.light import ATTR_BRIGHTNESS as ATTR_BRIGHTNESS, ATTR_COLOR_TEMP as ATTR_COLOR_TEMP, ATTR_HS_COLOR as ATTR_HS_COLOR, ATTR_RGBW_COLOR as ATTR_RGBW_COLOR, ATTR_TRANSITION as ATTR_TRANSITION, ColorMode as ColorMode, LightEntity as LightEntity, LightEntityFeature as LightEntityFeature
from homeassistant.config_entries import ConfigEntry as ConfigEntry
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback
from homeassistant.helpers.dispatcher import async_dispatcher_connect as async_dispatcher_connect
from homeassistant.helpers.entity_platform import AddEntitiesCallback as AddEntitiesCallback
from typing import Any
from zwave_js_server.const.command_class.color_switch import ColorComponent
from zwave_js_server.model.driver import Driver as Driver

PARALLEL_UPDATES: int
MULTI_COLOR_MAP: Incomplete

async def async_setup_entry(hass: HomeAssistant, config_entry: ConfigEntry, async_add_entities: AddEntitiesCallback) -> None: ...
def byte_to_zwave_brightness(value: int) -> int: ...

class ZwaveLight(ZWaveBaseEntity, LightEntity):
    _supports_color: bool
    _supports_rgbw: bool
    _supports_color_temp: bool
    _hs_color: Incomplete
    _rgbw_color: Incomplete
    _color_mode: Incomplete
    _color_temp: Incomplete
    _min_mireds: int
    _max_mireds: int
    _warm_white: Incomplete
    _cold_white: Incomplete
    _supported_color_modes: Incomplete
    _target_brightness: Incomplete
    _target_color: Incomplete
    supports_brightness_transition: Incomplete
    supports_color_transition: Incomplete
    _set_optimistic_state: bool
    def __init__(self, config_entry: ConfigEntry, driver: Driver, info: ZwaveDiscoveryInfo) -> None: ...
    def on_value_update(self) -> None: ...
    @property
    def brightness(self) -> int | None: ...
    @property
    def color_mode(self) -> str | None: ...
    @property
    def is_on(self) -> bool | None: ...
    @property
    def hs_color(self) -> tuple[float, float] | None: ...
    @property
    def rgbw_color(self) -> tuple[int, int, int, int] | None: ...
    @property
    def color_temp(self) -> int | None: ...
    @property
    def min_mireds(self) -> int: ...
    @property
    def max_mireds(self) -> int: ...
    @property
    def supported_color_modes(self) -> set[ColorMode] | None: ...
    async def async_turn_on(self, **kwargs: Any) -> None: ...
    async def async_turn_off(self, **kwargs: Any) -> None: ...
    async def _async_set_colors(self, colors: dict[ColorComponent, int], transition: float | None = ...) -> None: ...
    async def _async_set_brightness(self, brightness: int | None, transition: float | None = ...) -> None: ...
    def _calculate_color_values(self) -> None: ...

class ZwaveBlackIsOffLight(ZwaveLight):
    _last_color: Incomplete
    def __init__(self, config_entry: ConfigEntry, driver: Driver, info: ZwaveDiscoveryInfo) -> None: ...
    @property
    def brightness(self) -> int: ...
    @property
    def is_on(self) -> bool | None: ...
    async def async_turn_on(self, **kwargs: Any) -> None: ...
    async def async_turn_off(self, **kwargs: Any) -> None: ...
