from . import auth as auth
from .const import ATTR_ASSUMED_STATE as ATTR_ASSUMED_STATE, ATTR_FRIENDLY_NAME as ATTR_FRIENDLY_NAME, ATTR_HIDDEN as ATTR_HIDDEN, CONF_ALLOWLIST_EXTERNAL_DIRS as CONF_ALLOWLIST_EXTERNAL_DIRS, CONF_ALLOWLIST_EXTERNAL_URLS as CONF_ALLOWLIST_EXTERNAL_URLS, CONF_AUTH_MFA_MODULES as CONF_AUTH_MFA_MODULES, CONF_AUTH_PROVIDERS as CONF_AUTH_PROVIDERS, CONF_COUNTRY as CONF_COUNTRY, CONF_CURRENCY as CONF_CURRENCY, CONF_CUSTOMIZE as CONF_CUSTOMIZE, CONF_CUSTOMIZE_DOMAIN as CONF_CUSTOMIZE_DOMAIN, CONF_CUSTOMIZE_GLOB as CONF_CUSTOMIZE_GLOB, CONF_ELEVATION as CONF_ELEVATION, CONF_EXTERNAL_URL as CONF_EXTERNAL_URL, CONF_ID as CONF_ID, CONF_INTERNAL_URL as CONF_INTERNAL_URL, CONF_LANGUAGE as CONF_LANGUAGE, CONF_LATITUDE as CONF_LATITUDE, CONF_LEGACY_TEMPLATES as CONF_LEGACY_TEMPLATES, CONF_LONGITUDE as CONF_LONGITUDE, CONF_MEDIA_DIRS as CONF_MEDIA_DIRS, CONF_NAME as CONF_NAME, CONF_PACKAGES as CONF_PACKAGES, CONF_TEMPERATURE_UNIT as CONF_TEMPERATURE_UNIT, CONF_TIME_ZONE as CONF_TIME_ZONE, CONF_TYPE as CONF_TYPE, CONF_UNIT_SYSTEM as CONF_UNIT_SYSTEM, LEGACY_CONF_WHITELIST_EXTERNAL_DIRS as LEGACY_CONF_WHITELIST_EXTERNAL_DIRS, __version__ as __version__
from .core import ConfigSource as ConfigSource, HomeAssistant as HomeAssistant, callback as callback
from .exceptions import HomeAssistantError as HomeAssistantError
from .generated.currencies import HISTORIC_CURRENCIES as HISTORIC_CURRENCIES
from .helpers import config_per_platform as config_per_platform, extract_domain_configs as extract_domain_configs
from .helpers.entity_values import EntityValues as EntityValues
from .helpers.typing import ConfigType as ConfigType
from .loader import ComponentProtocol as ComponentProtocol, Integration as Integration, IntegrationNotFound as IntegrationNotFound
from .requirements import RequirementsNotFound as RequirementsNotFound, async_get_integration_with_requirements as async_get_integration_with_requirements
from .util.package import is_docker_env as is_docker_env
from .util.unit_system import get_unit_system as get_unit_system, validate_unit_system as validate_unit_system
from .util.yaml import SECRET_YAML as SECRET_YAML, Secrets as Secrets, load_yaml as load_yaml
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Sequence
from typing import Any

_LOGGER: Incomplete
DATA_PERSISTENT_ERRORS: str
RE_YAML_ERROR: Incomplete
RE_ASCII: Incomplete
YAML_CONFIG_FILE: str
VERSION_FILE: str
CONFIG_DIR_NAME: str
DATA_CUSTOMIZE: str
AUTOMATION_CONFIG_PATH: str
SCRIPT_CONFIG_PATH: str
SCENE_CONFIG_PATH: str
LOAD_EXCEPTIONS: Incomplete
INTEGRATION_LOAD_EXCEPTIONS: Incomplete
SAFE_MODE_FILENAME: str
DEFAULT_CONFIG: Incomplete
DEFAULT_SECRETS: str
TTS_PRE_92: str
TTS_92: str

def _no_duplicate_auth_provider(configs: Sequence[dict[str, Any]]) -> Sequence[dict[str, Any]]: ...
def _no_duplicate_auth_mfa_module(configs: Sequence[dict[str, Any]]) -> Sequence[dict[str, Any]]: ...
def _filter_bad_internal_external_urls(conf: dict) -> dict: ...

PACKAGES_CONFIG_SCHEMA: Incomplete
CUSTOMIZE_DICT_SCHEMA: Incomplete
CUSTOMIZE_CONFIG_SCHEMA: Incomplete

def _raise_issue_if_historic_currency(hass: HomeAssistant, currency: str) -> None: ...
def _raise_issue_if_no_country(hass: HomeAssistant, country: str | None) -> None: ...
def _validate_currency(data: Any) -> Any: ...

CORE_CONFIG_SCHEMA: Incomplete

def get_default_config_dir() -> str: ...
async def async_ensure_config_exists(hass: HomeAssistant) -> bool: ...
async def async_create_default_config(hass: HomeAssistant) -> bool: ...
def _write_default_config(config_dir: str) -> bool: ...
async def async_hass_config_yaml(hass: HomeAssistant) -> dict: ...
def load_yaml_config_file(config_path: str, secrets: Secrets | None = ...) -> dict[Any, Any]: ...
def process_ha_config_upgrade(hass: HomeAssistant) -> None: ...
def async_log_exception(ex: Exception, domain: str, config: dict, hass: HomeAssistant, link: str | None = ...) -> None: ...
def _format_config_error(ex: Exception, domain: str, config: dict, link: str | None = ...) -> tuple[str, bool]: ...
async def async_process_ha_core_config(hass: HomeAssistant, config: dict) -> None: ...
def _log_pkg_error(package: str, component: str, config: dict, message: str) -> None: ...
def _identify_config_schema(module: ComponentProtocol) -> str | None: ...
def _recursive_merge(conf: dict[str, Any], package: dict[str, Any]) -> bool | str: ...
async def merge_packages_config(hass: HomeAssistant, config: dict, packages: dict[str, Any], _log_pkg_error: Callable = ...) -> dict: ...
async def async_process_component_config(hass: HomeAssistant, config: ConfigType, integration: Integration) -> ConfigType | None: ...
def config_without_domain(config: ConfigType, domain: str) -> ConfigType: ...
async def async_check_ha_config_file(hass: HomeAssistant) -> str | None: ...
def async_notify_setup_error(hass: HomeAssistant, component: str, display_link: str | None = ...) -> None: ...
def safe_mode_enabled(config_dir: str) -> bool: ...
async def async_enable_safe_mode(hass: HomeAssistant) -> None: ...
