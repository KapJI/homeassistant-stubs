from homeassistant import core as core, setup as setup
from homeassistant.const import ATTR_DISCOVERED as ATTR_DISCOVERED, ATTR_SERVICE as ATTR_SERVICE, EVENT_PLATFORM_DISCOVERED as EVENT_PLATFORM_DISCOVERED
from homeassistant.core import CALLBACK_TYPE as CALLBACK_TYPE
from homeassistant.helpers.typing import ConfigType as ConfigType, DiscoveryInfoType as DiscoveryInfoType
from homeassistant.loader import bind_hass as bind_hass
from homeassistant.util.async_ import run_callback_threadsafe as run_callback_threadsafe
from typing import Any, Callable, Collection, Dict, Optional, Union

EVENT_LOAD_PLATFORM: str
ATTR_PLATFORM: str

def listen(hass: core.HomeAssistant, service: Union[str, Collection[str]], callback: CALLBACK_TYPE) -> None: ...
def async_listen(hass: core.HomeAssistant, service: Union[str, Collection[str]], callback: CALLBACK_TYPE) -> None: ...
def discover(hass: core.HomeAssistant, service: str, discovered: DiscoveryInfoType, component: str, hass_config: ConfigType) -> None: ...
async def async_discover(hass: core.HomeAssistant, service: str, discovered: Optional[DiscoveryInfoType], component: Optional[str], hass_config: ConfigType) -> None: ...
def listen_platform(hass: core.HomeAssistant, component: str, callback: CALLBACK_TYPE) -> None: ...
def async_listen_platform(hass: core.HomeAssistant, component: str, callback: Callable[[str, Optional[Dict[str, Any]]], Any]) -> None: ...
def load_platform(hass: core.HomeAssistant, component: str, platform: str, discovered: DiscoveryInfoType, hass_config: ConfigType) -> None: ...
async def async_load_platform(hass: core.HomeAssistant, component: str, platform: str, discovered: DiscoveryInfoType, hass_config: ConfigType) -> None: ...
