from _typeshed import Incomplete
from collections import UserDict
from collections.abc import ValuesView
from dataclasses import dataclass
from typing import TypeVar

@dataclass(slots=True, frozen=True, kw_only=True)
class NormalizedNameBaseRegistryEntry:
    name: str
    normalized_name: str
    def __init__(self, *, name, normalized_name) -> None: ...
_VT = TypeVar('_VT', bound=NormalizedNameBaseRegistryEntry)

def normalize_name(name: str) -> str: ...

class NormalizedNameBaseRegistryItems(UserDict[str, _VT]):
    _normalized_names: Incomplete
    def __init__(self) -> None: ...
    def values(self) -> ValuesView[_VT]: ...
    def __setitem__(self, key: str, entry: _VT) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def get_by_name(self, name: str) -> _VT | None: ...
