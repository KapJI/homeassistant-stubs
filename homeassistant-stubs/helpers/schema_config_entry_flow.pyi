import abc
import voluptuous as vol
from . import selector as selector
from _typeshed import Incomplete
from abc import abstractmethod
from collections.abc import Callable as Callable, Mapping
from homeassistant import config_entries as config_entries
from homeassistant.core import HomeAssistant as HomeAssistant, callback as callback, split_entity_id as split_entity_id
from homeassistant.data_entry_flow import FlowResult as FlowResult, UnknownHandler as UnknownHandler
from typing import Any

class SchemaFlowError(Exception): ...

class SchemaFlowFormStep:
    schema: Union[vol.Schema, Callable[[Union[SchemaConfigFlowHandler, SchemaOptionsFlowHandler], dict[str, Any]], Union[vol.Schema, None]], None]
    validate_user_input: Callable[[dict[str, Any]], dict[str, Any]]
    next_step: Callable[[dict[str, Any]], Union[str, None]]
    update_form_schema: Callable[[Union[SchemaConfigFlowHandler, SchemaOptionsFlowHandler], vol.Schema, dict[str, Any]], vol.Schema]
    def __init__(self, schema, validate_user_input, next_step, update_form_schema) -> None: ...

class SchemaFlowMenuStep:
    options: Union[list[str], dict[str, str]]
    def __init__(self, options) -> None: ...

class SchemaCommonFlowHandler:
    _flow: Incomplete
    _handler: Incomplete
    _options: Incomplete
    def __init__(self, handler: Union[SchemaConfigFlowHandler, SchemaOptionsFlowHandler], flow: dict[str, Union[SchemaFlowFormStep, SchemaFlowMenuStep]], config_entry: Union[config_entries.ConfigEntry, None]) -> None: ...
    async def async_step(self, step_id: str, user_input: Union[dict[str, Any], None] = ...) -> FlowResult: ...
    def _get_schema(self, form_step: SchemaFlowFormStep, options: dict[str, Any]) -> Union[vol.Schema, None]: ...
    async def _async_form_step(self, step_id: str, user_input: Union[dict[str, Any], None] = ...) -> FlowResult: ...
    def _show_next_step(self, next_step_id: str, error: Union[SchemaFlowError, None] = ..., user_input: Union[dict[str, Any], None] = ...) -> FlowResult: ...
    async def _async_menu_step(self, step_id: str, user_input: Union[dict[str, Any], None] = ...) -> FlowResult: ...

class SchemaConfigFlowHandler(config_entries.ConfigFlow, metaclass=abc.ABCMeta):
    config_flow: dict[str, Union[SchemaFlowFormStep, SchemaFlowMenuStep]]
    options_flow: Union[dict[str, Union[SchemaFlowFormStep, SchemaFlowMenuStep]], None]
    VERSION: int
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    _common_handler: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def async_supports_options_flow(cls, config_entry: config_entries.ConfigEntry) -> bool: ...
    @staticmethod
    def _async_step(step_id: str) -> Callable: ...
    @abstractmethod
    def async_config_entry_title(self, options: Mapping[str, Any]) -> str: ...
    def async_config_flow_finished(self, options: Mapping[str, Any]) -> None: ...
    @staticmethod
    def async_options_flow_finished(hass: HomeAssistant, options: Mapping[str, Any]) -> None: ...
    def async_create_entry(self, data: Mapping[str, Any], **kwargs: Any) -> FlowResult: ...

class SchemaOptionsFlowHandler(config_entries.OptionsFlow):
    _common_handler: Incomplete
    config_entry: Incomplete
    _async_options_flow_finished: Incomplete
    def __init__(self, config_entry: config_entries.ConfigEntry, options_flow: dict[str, vol.Schema], async_options_flow_finished: Callable[[HomeAssistant, Mapping[str, Any]], None]) -> None: ...
    @staticmethod
    def _async_step(step_id: str) -> Callable: ...
    def async_create_entry(self, data: Mapping[str, Any], **kwargs: Any) -> FlowResult: ...

def wrapped_entity_config_entry_title(hass: HomeAssistant, entity_id_or_uuid: str) -> str: ...
def entity_selector_without_own_entities(handler: SchemaOptionsFlowHandler, entity_selector_config: selector.EntitySelectorConfig) -> vol.Schema: ...
