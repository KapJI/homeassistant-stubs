import homeassistant.core as ha
import voluptuous as vol
from homeassistant.auth.permissions.const import CAT_ENTITIES as CAT_ENTITIES, POLICY_CONTROL as POLICY_CONTROL
from homeassistant.const import ATTR_AREA_ID as ATTR_AREA_ID, ATTR_DEVICE_ID as ATTR_DEVICE_ID, ATTR_ENTITY_ID as ATTR_ENTITY_ID, CONF_ENTITY_ID as CONF_ENTITY_ID, CONF_SERVICE as CONF_SERVICE, CONF_SERVICE_DATA as CONF_SERVICE_DATA, CONF_SERVICE_TEMPLATE as CONF_SERVICE_TEMPLATE, CONF_TARGET as CONF_TARGET, ENTITY_MATCH_ALL as ENTITY_MATCH_ALL, ENTITY_MATCH_NONE as ENTITY_MATCH_NONE
from homeassistant.exceptions import HomeAssistantError as HomeAssistantError, TemplateError as TemplateError, Unauthorized as Unauthorized, UnknownUser as UnknownUser
from homeassistant.helpers import area_registry as area_registry, device_registry as device_registry, entity_registry as entity_registry, template as template
from homeassistant.helpers.entity import Entity as Entity
from homeassistant.helpers.entity_platform import EntityPlatform as EntityPlatform
from homeassistant.helpers.typing import ConfigType as ConfigType, HomeAssistantType as HomeAssistantType, TemplateVarsType as TemplateVarsType
from homeassistant.loader import Integration as Integration, MAX_LOAD_CONCURRENTLY as MAX_LOAD_CONCURRENTLY, async_get_integration as async_get_integration, bind_hass as bind_hass
from homeassistant.util.async_ import gather_with_concurrency as gather_with_concurrency
from homeassistant.util.yaml import load_yaml as load_yaml
from homeassistant.util.yaml.loader import JSON_TYPE as JSON_TYPE
from typing import Any, Awaitable, Callable, Dict, Iterable, List, Optional, Set, TypedDict, Union

CONF_SERVICE_ENTITY_ID: str
CONF_SERVICE_DATA_TEMPLATE: str
SERVICE_DESCRIPTION_CACHE: str

class ServiceParams(TypedDict):
    domain: str
    service: str
    service_data: Dict[str, Any]
    target: Optional[Dict]

class SelectedEntities:
    referenced: Set[str] = ...
    indirectly_referenced: Set[str] = ...
    missing_devices: Set[str] = ...
    missing_areas: Set[str] = ...
    def log_missing(self, missing_entities: Set[str]) -> None: ...
    def __init__(self, referenced: Any, indirectly_referenced: Any, missing_devices: Any, missing_areas: Any) -> None: ...

def call_from_config(hass: HomeAssistantType, config: ConfigType, blocking: bool=..., variables: TemplateVarsType=..., validate_config: bool=...) -> None: ...
async def async_call_from_config(hass: HomeAssistantType, config: ConfigType, blocking: bool=..., variables: TemplateVarsType=..., validate_config: bool=..., context: Optional[ha.Context]=...) -> None: ...
def async_prepare_call_from_config(hass: HomeAssistantType, config: ConfigType, variables: TemplateVarsType=..., validate_config: bool=...) -> ServiceParams: ...
def extract_entity_ids(hass: HomeAssistantType, service_call: ha.ServiceCall, expand_group: bool=...) -> Set[str]: ...
async def async_extract_entities(hass: HomeAssistantType, entities: Iterable[Entity], service_call: ha.ServiceCall, expand_group: bool=...) -> List[Entity]: ...
async def async_extract_entity_ids(hass: HomeAssistantType, service_call: ha.ServiceCall, expand_group: bool=...) -> Set[str]: ...
async def async_extract_referenced_entity_ids(hass: HomeAssistantType, service_call: ha.ServiceCall, expand_group: bool=...) -> SelectedEntities: ...
async def async_get_all_descriptions(hass: HomeAssistantType) -> Dict[str, Dict[str, Any]]: ...
def async_set_service_schema(hass: HomeAssistantType, domain: str, service: str, schema: Dict[str, Any]) -> None: ...
async def entity_service_call(hass: HomeAssistantType, platforms: Iterable[EntityPlatform], func: Union[str, Callable[..., Any]], call: ha.ServiceCall, required_features: Optional[Iterable[int]]=...) -> None: ...
def async_register_admin_service(hass: HomeAssistantType, domain: str, service: str, service_func: Callable[[ha.ServiceCall], Optional[Awaitable]], schema: vol.Schema=...) -> None: ...
def verify_domain_control(hass: HomeAssistantType, domain: str) -> Callable[[Callable[[ha.ServiceCall], Any]], Callable[[ha.ServiceCall], Any]]: ...
