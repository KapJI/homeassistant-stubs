from homeassistant.const import ATTR_ENTITY_ID as ATTR_ENTITY_ID, ATTR_LATITUDE as ATTR_LATITUDE, ATTR_LONGITUDE as ATTR_LONGITUDE, ATTR_UNIT_OF_MEASUREMENT as ATTR_UNIT_OF_MEASUREMENT, LENGTH_METERS as LENGTH_METERS, STATE_UNKNOWN as STATE_UNKNOWN
from homeassistant.core import HomeAssistant as HomeAssistant, State as State, callback as callback, split_entity_id as split_entity_id, valid_entity_id as valid_entity_id
from homeassistant.exceptions import TemplateError as TemplateError
from homeassistant.helpers import entity_registry as entity_registry
from homeassistant.helpers.typing import TemplateVarsType as TemplateVarsType
from homeassistant.loader import bind_hass as bind_hass
from homeassistant.util import convert as convert
from homeassistant.util.async_ import run_callback_threadsafe as run_callback_threadsafe
from homeassistant.util.thread import ThreadWithException as ThreadWithException
from jinja2.sandbox import ImmutableSandboxedEnvironment
from typing import Any, Iterable, Optional

DATE_STR_FORMAT: str
ALL_STATES_RATE_LIMIT: Any
DOMAIN_STATES_RATE_LIMIT: Any

def attach(hass: HomeAssistant, obj: Any) -> None: ...
def render_complex(value: Any, variables: TemplateVarsType=..., limited: bool=...) -> Any: ...
def is_complex(value: Any) -> bool: ...
def is_template_string(maybe_template: str) -> bool: ...

class ResultWrapper:
    render_result: Union[str, None]

def gen_result_wrapper(kls: Any): ...

class TupleWrapper(tuple, ResultWrapper):
    def __new__(cls: Any, value: tuple, *, render_result: Union[str, None]=...) -> TupleWrapper: ...
    render_result: Any = ...
    def __init__(self, value: tuple, *, render_result: Union[str, None]=...) -> None: ...

RESULT_WRAPPERS: dict[type, type]

class RenderInfo:
    template: Any = ...
    filter_lifecycle: Any = ...
    filter: Any = ...
    is_static: bool = ...
    exception: Any = ...
    all_states: bool = ...
    all_states_lifecycle: bool = ...
    domains: Any = ...
    domains_lifecycle: Any = ...
    entities: Any = ...
    rate_limit: Any = ...
    has_time: bool = ...
    def __init__(self, template: Any) -> None: ...
    def result(self) -> str: ...

class Template:
    template: Any = ...
    hass: Any = ...
    is_static: Any = ...
    def __init__(self, template: Any, hass: Optional[Any] = ...) -> None: ...
    def ensure_valid(self) -> None: ...
    def render(self, variables: TemplateVarsType=..., parse_result: bool=..., limited: bool=..., **kwargs: Any) -> Any: ...
    def async_render(self, variables: TemplateVarsType=..., parse_result: bool=..., limited: bool=..., **kwargs: Any) -> Any: ...
    async def async_render_will_timeout(self, timeout: float, variables: TemplateVarsType=..., **kwargs: Any) -> bool: ...
    def async_render_to_info(self, variables: TemplateVarsType=..., **kwargs: Any) -> RenderInfo: ...
    def render_with_possible_json_value(self, value: Any, error_value: Any = ...): ...
    def async_render_with_possible_json_value(self, value: Any, error_value: Any = ..., variables: Optional[Any] = ...): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> int: ...

class AllStates:
    def __init__(self, hass: HomeAssistant) -> None: ...
    def __getattr__(self, name: Any): ...
    __getitem__: Any = ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __call__(self, entity_id: Any): ...

class DomainStates:
    def __init__(self, hass: HomeAssistant, domain: str) -> None: ...
    def __getattr__(self, name: Any): ...
    __getitem__: Any = ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...

class TemplateState(State):
    def __init__(self, hass: HomeAssistant, state: State, collect: bool=...) -> None: ...
    def __getitem__(self, item: Any): ...
    @property
    def entity_id(self): ...
    @property
    def state(self): ...
    @property
    def attributes(self): ...
    @property
    def last_changed(self): ...
    @property
    def last_updated(self): ...
    @property
    def context(self): ...
    @property
    def domain(self): ...
    @property
    def object_id(self): ...
    @property
    def name(self): ...
    @property
    def state_with_unit(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...

def result_as_boolean(template_result: Union[str, None]) -> bool: ...
def expand(hass: HomeAssistant, *args: Any) -> Iterable[State]: ...
def device_entities(hass: HomeAssistant, device_id: str) -> Iterable[str]: ...
def closest(hass: Any, *args: Any): ...
def closest_filter(hass: Any, *args: Any): ...
def distance(hass: Any, *args: Any): ...
def is_state(hass: HomeAssistant, entity_id: str, state: State) -> bool: ...
def is_state_attr(hass: Any, entity_id: Any, name: Any, value: Any): ...
def state_attr(hass: Any, entity_id: Any, name: Any): ...
def now(hass: Any): ...
def utcnow(hass: Any): ...
def forgiving_round(value: Any, precision: int = ..., method: str = ...): ...
def multiply(value: Any, amount: Any): ...
def logarithm(value: Any, base: Any = ...): ...
def sine(value: Any): ...
def cosine(value: Any): ...
def tangent(value: Any): ...
def arc_sine(value: Any): ...
def arc_cosine(value: Any): ...
def arc_tangent(value: Any): ...
def arc_tangent2(*args: Any): ...
def square_root(value: Any): ...
def timestamp_custom(value: Any, date_format: Any = ..., local: bool = ...): ...
def timestamp_local(value: Any): ...
def timestamp_utc(value: Any): ...
def forgiving_as_timestamp(value: Any): ...
def strptime(string: Any, fmt: Any): ...
def fail_when_undefined(value: Any): ...
def forgiving_float(value: Any): ...
def regex_match(value: Any, find: str = ..., ignorecase: bool = ...): ...
def regex_replace(value: str = ..., find: str = ..., replace: str = ..., ignorecase: bool = ...): ...
def regex_search(value: Any, find: str = ..., ignorecase: bool = ...): ...
def regex_findall_index(value: Any, find: str = ..., index: int = ..., ignorecase: bool = ...): ...
def bitwise_and(first_value: Any, second_value: Any): ...
def bitwise_or(first_value: Any, second_value: Any): ...
def base64_encode(value: Any): ...
def base64_decode(value: Any): ...
def ordinal(value: Any): ...
def from_json(value: Any): ...
def to_json(value: Any): ...
def random_every_time(context: Any, values: Any): ...
def relative_time(value: Any): ...
def urlencode(value: Any): ...

class TemplateEnvironment(ImmutableSandboxedEnvironment):
    hass: Any = ...
    template_cache: Any = ...
    def __init__(self, hass: Any, limited: bool = ...): ...
    def is_safe_callable(self, obj: Any): ...
    def is_safe_attribute(self, obj: Any, attr: Any, value: Any): ...
    def compile(self, source: Any, name: Optional[Any] = ..., filename: Optional[Any] = ..., raw: bool = ..., defer_init: bool = ...): ...
