from .typing import HomeAssistantType as HomeAssistantType
from homeassistant.core import callback as callback
from homeassistant.loader import Integration as Integration, MAX_LOAD_CONCURRENTLY as MAX_LOAD_CONCURRENTLY, async_get_config_flows as async_get_config_flows, async_get_integration as async_get_integration, bind_hass as bind_hass
from homeassistant.util.async_ import gather_with_concurrency as gather_with_concurrency
from homeassistant.util.json import load_json as load_json
from typing import Any, Dict, List, Optional, Set

TRANSLATION_LOAD_LOCK: str
TRANSLATION_FLATTEN_CACHE: str
LOCALE_EN: str

def recursive_flatten(prefix: Any, data: Dict) -> Dict[str, Any]: ...
def component_translation_path(component: str, language: str, integration: Integration) -> Optional[str]: ...
def load_translations_files(translation_files: Dict[str, str]) -> Dict[str, Dict[str, Any]]: ...
async def async_get_component_strings(hass: HomeAssistantType, language: str, components: Set[str]) -> Dict[str, Any]: ...

class _TranslationCache:
    hass: Any = ...
    loaded: Any = ...
    cache: Any = ...
    def __init__(self, hass: HomeAssistantType) -> None: ...
    async def async_fetch(self, language: str, category: str, components: Set) -> List[Dict[str, Dict[str, Any]]]: ...

async def async_get_translations(hass: HomeAssistantType, language: str, category: str, integration: Optional[str]=..., config_flow: Optional[bool]=...) -> Dict[str, Any]: ...
