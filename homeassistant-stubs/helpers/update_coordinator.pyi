import logging
from . import entity as entity, event as event
from .debounce import Debouncer as Debouncer
from _typeshed import Incomplete
from collections.abc import Awaitable, Callable as Callable, Coroutine, Generator
from datetime import datetime, timedelta
from homeassistant import config_entries as config_entries
from homeassistant.core import CALLBACK_TYPE as CALLBACK_TYPE, HassJob as HassJob, HomeAssistant as HomeAssistant, callback as callback
from homeassistant.exceptions import ConfigEntryAuthFailed as ConfigEntryAuthFailed, ConfigEntryNotReady as ConfigEntryNotReady
from homeassistant.util.dt import utcnow as utcnow
from typing import Any, TypeVar

REQUEST_REFRESH_DEFAULT_COOLDOWN: int
REQUEST_REFRESH_DEFAULT_IMMEDIATE: bool
_T = TypeVar('_T')
_DataUpdateCoordinatorT = TypeVar('_DataUpdateCoordinatorT', bound='DataUpdateCoordinator[Any]')

class UpdateFailed(Exception): ...

class DataUpdateCoordinator:
    hass: Incomplete
    logger: Incomplete
    name: Incomplete
    update_method: Incomplete
    update_interval: Incomplete
    config_entry: Incomplete
    data: Incomplete
    _listeners: Incomplete
    _job: Incomplete
    _unsub_refresh: Incomplete
    _request_refresh_task: Incomplete
    last_update_success: bool
    last_exception: Incomplete
    _debounced_refresh: Incomplete
    def __init__(self, hass: HomeAssistant, logger: logging.Logger, *, name: str, update_interval: Union[timedelta, None] = ..., update_method: Union[Callable[[], Awaitable[_T]], None] = ..., request_refresh_debouncer: Union[Debouncer[Coroutine[Any, Any, None]], None] = ...) -> None: ...
    def async_add_listener(self, update_callback: CALLBACK_TYPE, context: Any = ...) -> Callable[[], None]: ...
    def async_update_listeners(self) -> None: ...
    def _unschedule_refresh(self) -> None: ...
    def async_contexts(self) -> Generator[Any, None, None]: ...
    def _schedule_refresh(self) -> None: ...
    async def _handle_refresh_interval(self, _now: datetime) -> None: ...
    async def async_request_refresh(self) -> None: ...
    async def _async_update_data(self) -> _T: ...
    async def async_config_entry_first_refresh(self) -> None: ...
    async def async_refresh(self) -> None: ...
    async def _async_refresh(self, log_failures: bool = ..., raise_on_auth_failed: bool = ..., scheduled: bool = ...) -> None: ...
    def async_set_update_error(self, err: Exception) -> None: ...
    def async_set_updated_data(self, data: _T) -> None: ...

class CoordinatorEntity(entity.Entity):
    coordinator: Incomplete
    coordinator_context: Incomplete
    def __init__(self, coordinator: _DataUpdateCoordinatorT, context: Any = ...) -> None: ...
    @property
    def should_poll(self) -> bool: ...
    @property
    def available(self) -> bool: ...
    async def async_added_to_hass(self) -> None: ...
    def _handle_coordinator_update(self) -> None: ...
    async def async_update(self) -> None: ...
