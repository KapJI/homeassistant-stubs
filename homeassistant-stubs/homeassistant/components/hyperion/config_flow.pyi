from . import create_hyperion_client as create_hyperion_client
from .const import CONF_AUTH_ID as CONF_AUTH_ID, CONF_CREATE_TOKEN as CONF_CREATE_TOKEN, CONF_PRIORITY as CONF_PRIORITY, DEFAULT_ORIGIN as DEFAULT_ORIGIN, DEFAULT_PRIORITY as DEFAULT_PRIORITY, DOMAIN as DOMAIN
from homeassistant.components.ssdp import ATTR_SSDP_LOCATION as ATTR_SSDP_LOCATION, ATTR_UPNP_SERIAL as ATTR_UPNP_SERIAL
from homeassistant.config_entries import CONN_CLASS_LOCAL_PUSH as CONN_CLASS_LOCAL_PUSH, ConfigEntry as ConfigEntry, ConfigFlow as ConfigFlow, OptionsFlow as OptionsFlow, SOURCE_REAUTH as SOURCE_REAUTH
from homeassistant.const import CONF_BASE as CONF_BASE, CONF_HOST as CONF_HOST, CONF_ID as CONF_ID, CONF_PORT as CONF_PORT, CONF_SOURCE as CONF_SOURCE, CONF_TOKEN as CONF_TOKEN
from homeassistant.core import callback as callback
from homeassistant.helpers.typing import ConfigType as ConfigType
from typing import Any, Dict, Optional

class HyperionConfigFlow(ConfigFlow):
    VERSION: int = ...
    CONNECTION_CLASS: Any = ...
    def __init__(self) -> None: ...
    async def async_step_reauth(self, config_data: ConfigType) -> Dict[str, Any]: ...
    async def async_step_ssdp(self, discovery_info: Dict[str, Any]) -> Dict[str, Any]: ...
    async def async_step_user(self, user_input: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    async def async_step_auth(self, user_input: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    async def async_step_create_token(self, user_input: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    async def async_step_create_token_external(self, auth_resp: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    async def async_step_create_token_success(self, _: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    async def async_step_create_token_fail(self, _: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    async def async_step_confirm(self, user_input: Optional[ConfigType]=...) -> Dict[str, Any]: ...
    @staticmethod
    def async_get_options_flow(config_entry: ConfigEntry) -> HyperionOptionsFlow: ...

class HyperionOptionsFlow(OptionsFlow):
    def __init__(self, config_entry: ConfigEntry) -> None: ...
    async def async_step_init(self, user_input: Optional[Dict[str, Any]]=...) -> Dict[str, Any]: ...
