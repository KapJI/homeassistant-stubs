from . import TEST_AUTH_REQUIRED_RESP as TEST_AUTH_REQUIRED_RESP, TEST_CONFIG_ENTRY_ID as TEST_CONFIG_ENTRY_ID, TEST_ENTITY_ID_1 as TEST_ENTITY_ID_1, TEST_HOST as TEST_HOST, TEST_INSTANCE as TEST_INSTANCE, TEST_PORT as TEST_PORT, TEST_PORT_UI as TEST_PORT_UI, TEST_SYSINFO_ID as TEST_SYSINFO_ID, TEST_TITLE as TEST_TITLE, TEST_TOKEN as TEST_TOKEN, add_test_config_entry as add_test_config_entry, create_mock_client as create_mock_client
from homeassistant.helpers.typing import HomeAssistantType as HomeAssistantType
from tests.common import MockConfigEntry as MockConfigEntry
from typing import Any, Dict

TEST_IP_ADDRESS: str
TEST_HOST_PORT: Dict[str, Any]
TEST_AUTH_ID: str
TEST_REQUEST_TOKEN_SUCCESS: Any
TEST_REQUEST_TOKEN_FAIL: Any
TEST_SSDP_SERVICE_INFO: Any

async def test_user_if_no_configuration(hass: HomeAssistantType) -> None: ...
async def test_user_existing_id_abort(hass: HomeAssistantType) -> None: ...
async def test_user_client_errors(hass: HomeAssistantType) -> None: ...
async def test_user_confirm_cannot_connect(hass: HomeAssistantType) -> None: ...
async def test_user_confirm_id_error(hass: HomeAssistantType) -> None: ...
async def test_user_noauth_flow_success(hass: HomeAssistantType) -> None: ...
async def test_user_auth_required(hass: HomeAssistantType) -> None: ...
async def test_auth_static_token_auth_required_fail(hass: HomeAssistantType) -> None: ...
async def test_auth_static_token_success(hass: HomeAssistantType) -> None: ...
async def test_auth_static_token_login_fail(hass: HomeAssistantType) -> None: ...
async def test_auth_create_token_approval_declined(hass: HomeAssistantType) -> None: ...
async def test_auth_create_token_when_issued_token_fails(hass: HomeAssistantType) -> None: ...
async def test_auth_create_token_success(hass: HomeAssistantType) -> None: ...
async def test_ssdp_success(hass: HomeAssistantType) -> None: ...
async def test_ssdp_cannot_connect(hass: HomeAssistantType) -> None: ...
async def test_ssdp_missing_serial(hass: HomeAssistantType) -> None: ...
async def test_ssdp_failure_bad_port_json(hass: HomeAssistantType) -> None: ...
async def test_ssdp_failure_bad_port_ui(hass: HomeAssistantType) -> None: ...
async def test_ssdp_abort_duplicates(hass: HomeAssistantType) -> None: ...
async def test_options(hass: HomeAssistantType) -> None: ...
async def test_reauth_success(hass: HomeAssistantType) -> None: ...
async def test_reauth_cannot_connect(hass: HomeAssistantType) -> None: ...
