import logging
import logging.handlers
from collections.abc import Callable, Coroutine
from homeassistant.core import HassJobType as HassJobType, HomeAssistant as HomeAssistant, callback as callback, get_hassjob_callable_job_type as get_hassjob_callable_job_type
from typing import Any, overload

class HomeAssistantQueueHandler(logging.handlers.QueueHandler):
    listener: logging.handlers.QueueListener | None
    def handle(self, record: logging.LogRecord) -> Any: ...
    def close(self) -> None: ...

def async_activate_log_queue_handler(hass: HomeAssistant) -> None: ...
def log_exception(format_err: Callable[[Unpack[_Ts]], Any], *args: Unpack[_Ts]) -> None: ...
async def _async_wrapper(async_func: Callable[[Unpack[_Ts]], Coroutine[Any, Any, None]], format_err: Callable[[Unpack[_Ts]], Any], *args: Unpack[_Ts]) -> None: ...
def _sync_wrapper(func: Callable[[Unpack[_Ts]], Any], format_err: Callable[[Unpack[_Ts]], Any], *args: Unpack[_Ts]) -> None: ...
def _callback_wrapper(func: Callable[[Unpack[_Ts]], Any], format_err: Callable[[Unpack[_Ts]], Any], *args: Unpack[_Ts]) -> None: ...
@overload
def catch_log_exception(func: Callable[[Unpack[_Ts]], Coroutine[Any, Any, Any]], format_err: Callable[[Unpack[_Ts]], Any], job_type: HassJobType | None = None) -> Callable[[Unpack[_Ts]], Coroutine[Any, Any, None]]: ...
@overload
def catch_log_exception(func: Callable[[Unpack[_Ts]], Any], format_err: Callable[[Unpack[_Ts]], Any], job_type: HassJobType | None = None) -> Callable[[Unpack[_Ts]], None] | Callable[[Unpack[_Ts]], Coroutine[Any, Any, None]]: ...
def catch_log_coro_exception(target: Coroutine[Any, Any, _T], format_err: Callable[[Unpack[_Ts]], Any], *args: Unpack[_Ts]) -> Coroutine[Any, Any, _T | None]: ...
def async_create_catching_coro(target: Coroutine[Any, Any, _T]) -> Coroutine[Any, Any, _T | None]: ...
